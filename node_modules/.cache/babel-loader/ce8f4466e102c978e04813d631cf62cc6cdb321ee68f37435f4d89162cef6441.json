{"ast":null,"code":"var _jsxFileName = \"/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [turn, setTurn] = useState(\"white\");\n  const [gameOver, setGameOver] = useState(false);\n  const [gameMessage, setGameMessage] = useState(\"\");\n\n  // After each board or turn change, check if the game is over.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      // If the king is in check, it's checkmate and the opponent wins.\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      setGameOver(true);\n    }\n  }, [board, turn]);\n  const handleCellClick = (row, col) => {\n    if (gameOver) return; // Do nothing if the game is over\n\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({\n          row,\n          col\n        });\n      }\n      return;\n    }\n    if (isValidMove(board, selectedCell, {\n      row,\n      col\n    }, turn, [])) {\n      const newBoard = board.map(r => [...r]);\n      newBoard[row][col] = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n      setBoard(newBoard);\n      // Switch turns\n      setTurn(turn === \"white\" ? \"black\" : \"white\");\n    }\n    setSelectedCell(null);\n  };\n  const handleRestart = () => {\n    setBoard(initialBoard);\n    setTurn(\"white\");\n    setSelectedCell(null);\n    setGameOver(false);\n    setGameMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-board\",\n      children: board.map((rowData, rowIndex) => rowData.map((cellData, colIndex) => {\n        const isLight = (rowIndex + colIndex) % 2 === 0;\n        let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n        if (selectedCell && selectedCell.row === rowIndex && selectedCell.col === colIndex) {\n          cellClass += \" selected\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cellClass,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: cellData && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\",\n            children: pieceSymbols[cellData]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 19\n          }, this)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turn: \", turn.charAt(0).toUpperCase() + turn.slice(1)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRestart,\n          children: \"Restart Match\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"yEwpzgNQm+UgoFWIci7bIx+IB2I=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","initialBoard","pieceSymbols","isValidMove","isGameOver","isKingInCheck","jsxDEV","_jsxDEV","ChessBoard","_s","board","setBoard","selectedCell","setSelectedCell","turn","setTurn","gameOver","setGameOver","gameMessage","setGameMessage","winner","handleCellClick","row","col","newBoard","map","r","handleRestart","className","children","rowData","rowIndex","cellData","colIndex","isLight","cellClass","onClick","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","charAt","slice","_c","$RefreshReg$"],"sources":["/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [turn, setTurn] = useState(\"white\");\n  const [gameOver, setGameOver] = useState(false);\n  const [gameMessage, setGameMessage] = useState(\"\");\n\n  // After each board or turn change, check if the game is over.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      // If the king is in check, it's checkmate and the opponent wins.\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      setGameOver(true);\n    }\n  }, [board, turn]);\n\n  const handleCellClick = (row, col) => {\n    if (gameOver) return; // Do nothing if the game is over\n\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({ row, col });\n      }\n      return;\n    }\n\n    if (isValidMove(board, selectedCell, { row, col }, turn, [])) {\n      const newBoard = board.map((r) => [...r]);\n      newBoard[row][col] = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n      setBoard(newBoard);\n      // Switch turns\n      setTurn(turn === \"white\" ? \"black\" : \"white\");\n    }\n    setSelectedCell(null);\n  };\n\n  const handleRestart = () => {\n    setBoard(initialBoard);\n    setTurn(\"white\");\n    setSelectedCell(null);\n    setGameOver(false);\n    setGameMessage(\"\");\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"chess-board\">\n        {board.map((rowData, rowIndex) =>\n          rowData.map((cellData, colIndex) => {\n            const isLight = (rowIndex + colIndex) % 2 === 0;\n            let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n            if (selectedCell && selectedCell.row === rowIndex && selectedCell.col === colIndex) {\n              cellClass += \" selected\";\n            }\n            return (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={cellClass}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {cellData && (\n                  <span className={cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\"}>\n                    {pieceSymbols[cellData]}\n                  </span>\n                )}\n              </div>\n            );\n          })\n        )}\n      </div>\n      <div className=\"status\">\n        {!gameOver ? (\n          <p>Turn: {turn.charAt(0).toUpperCase() + turn.slice(1)}</p>\n        ) : (\n          <div>\n            <p>{gameMessage}</p>\n            <button onClick={handleRestart}>Restart Match</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}