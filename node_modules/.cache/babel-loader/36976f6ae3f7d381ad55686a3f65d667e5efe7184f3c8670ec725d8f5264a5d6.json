{"ast":null,"code":"var _jsxFileName = \"/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst promotionOptions = [\"q\", \"r\", \"b\", \"n\"];\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [availableMoves, setAvailableMoves] = useState([]);\n  const [turn, setTurn] = useState(\"white\");\n  const [gameOver, setGameOver] = useState(false);\n  const [gameMessage, setGameMessage] = useState(\"\");\n  const [promotion, setPromotion] = useState(null);\n\n  // Update available moves when a piece is selected.\n  useEffect(() => {\n    if (selectedCell) {\n      const moves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedCell, {\n            row,\n            col\n          }, turn, [])) {\n            moves.push({\n              row,\n              col\n            });\n          }\n        }\n      }\n      setAvailableMoves(moves);\n    } else {\n      setAvailableMoves([]);\n    }\n  }, [selectedCell, board, turn]);\n\n  // Check game status after every move.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      setGameOver(true);\n    }\n  }, [board, turn]);\n  const handleCellClick = (row, col) => {\n    if (gameOver || promotion) return;\n\n    // If clicking a highlighted move, then perform the move.\n    if (selectedCell && availableMoves.some(move => move.row === row && move.col === col)) {\n      const newBoard = board.map(r => [...r]);\n      const movingPiece = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n      // Check if pawn reaches promotion rank.\n      if (movingPiece.toLowerCase() === \"p\" && (turn === \"white\" && row === 0 || turn === \"black\" && row === 7)) {\n        newBoard[row][col] = movingPiece; // Temporarily place pawn.\n        setPromotion({\n          row,\n          col,\n          color: turn,\n          piece: movingPiece\n        });\n      } else {\n        newBoard[row][col] = movingPiece;\n      }\n      // Handle castling.\n      if (movingPiece.toLowerCase() === \"k\" && Math.abs(col - selectedCell.col) === 2) {\n        if (col > selectedCell.col) {\n          newBoard[selectedCell.row][7] = \"\";\n          newBoard[selectedCell.row][5] = turn === \"white\" ? \"R\" : \"r\";\n        } else {\n          newBoard[selectedCell.row][0] = \"\";\n          newBoard[selectedCell.row][3] = turn === \"white\" ? \"R\" : \"r\";\n        }\n      }\n      setBoard(newBoard);\n      if (!(movingPiece.toLowerCase() === \"p\" && (turn === \"white\" && row === 0 || turn === \"black\" && row === 7))) {\n        setTurn(turn === \"white\" ? \"black\" : \"white\");\n      }\n      setSelectedCell(null);\n      return;\n    }\n\n    // Select a piece.\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({\n          row,\n          col\n        });\n      }\n      return;\n    }\n    // If clicking another own piece, update selection.\n    if (board[row][col] !== \"\" && board[row][col] === board[row][col].toUpperCase() === (turn === \"white\")) {\n      setSelectedCell({\n        row,\n        col\n      });\n      return;\n    }\n    // Clicking outside valid available moves clears selection.\n    setSelectedCell(null);\n  };\n  const handlePromotionChoice = choice => {\n    const newBoard = board.map(r => [...r]);\n    const {\n      row,\n      col,\n      color\n    } = promotion;\n    const promotedPiece = color === \"white\" ? choice.toUpperCase() : choice.toLowerCase();\n    newBoard[row][col] = promotedPiece;\n    setBoard(newBoard);\n    setPromotion(null);\n    setTurn(turn === \"white\" ? \"black\" : \"white\");\n  };\n  const handleRestart = () => {\n    setBoard(initialBoard);\n    setTurn(\"white\");\n    setSelectedCell(null);\n    setAvailableMoves([]);\n    setGameOver(false);\n    setGameMessage(\"\");\n    setPromotion(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-board\",\n      children: board.map((rowData, rowIndex) => rowData.map((cellData, colIndex) => {\n        const isLight = (rowIndex + colIndex) % 2 === 0;\n        let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n        if (selectedCell && selectedCell.row === rowIndex && selectedCell.col === colIndex) {\n          cellClass += \" selected\";\n        }\n        if (availableMoves.some(move => move.row === rowIndex && move.col === colIndex)) {\n          cellClass += \" available\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cellClass,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: cellData && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\",\n            children: pieceSymbols[cellData]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 19\n          }, this)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turn: \", turn.charAt(0).toUpperCase() + turn.slice(1)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRestart,\n          children: \"Restart Match\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), promotion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"promotion-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"promotion-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Promote Pawn:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), promotionOptions.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePromotionChoice(option),\n          children: pieceSymbols[promotion.color === \"white\" ? option.toUpperCase() : option.toLowerCase()]\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"Gq0vunODX9+ltuXUGMf7d2PkNFY=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","initialBoard","pieceSymbols","isValidMove","isGameOver","isKingInCheck","jsxDEV","_jsxDEV","promotionOptions","ChessBoard","_s","board","setBoard","selectedCell","setSelectedCell","availableMoves","setAvailableMoves","turn","setTurn","gameOver","setGameOver","gameMessage","setGameMessage","promotion","setPromotion","moves","row","col","push","winner","handleCellClick","some","move","newBoard","map","r","movingPiece","toLowerCase","color","piece","Math","abs","toUpperCase","handlePromotionChoice","choice","promotedPiece","handleRestart","className","children","rowData","rowIndex","cellData","colIndex","isLight","cellClass","onClick","fileName","_jsxFileName","lineNumber","columnNumber","charAt","slice","option","_c","$RefreshReg$"],"sources":["/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\n\nconst promotionOptions = [\"q\", \"r\", \"b\", \"n\"];\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [availableMoves, setAvailableMoves] = useState([]);\n  const [turn, setTurn] = useState(\"white\");\n  const [gameOver, setGameOver] = useState(false);\n  const [gameMessage, setGameMessage] = useState(\"\");\n  const [promotion, setPromotion] = useState(null);\n\n  // Update available moves when a piece is selected.\n  useEffect(() => {\n    if (selectedCell) {\n      const moves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedCell, { row, col }, turn, [])) {\n            moves.push({ row, col });\n          }\n        }\n      }\n      setAvailableMoves(moves);\n    } else {\n      setAvailableMoves([]);\n    }\n  }, [selectedCell, board, turn]);\n\n  // Check game status after every move.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      setGameOver(true);\n    }\n  }, [board, turn]);\n\n  const handleCellClick = (row, col) => {\n    if (gameOver || promotion) return;\n\n    // If clicking a highlighted move, then perform the move.\n    if (selectedCell && availableMoves.some(move => move.row === row && move.col === col)) {\n      const newBoard = board.map(r => [...r]);\n      const movingPiece = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n      // Check if pawn reaches promotion rank.\n      if (movingPiece.toLowerCase() === \"p\" && ((turn === \"white\" && row === 0) || (turn === \"black\" && row === 7))) {\n        newBoard[row][col] = movingPiece; // Temporarily place pawn.\n        setPromotion({ row, col, color: turn, piece: movingPiece });\n      } else {\n        newBoard[row][col] = movingPiece;\n      }\n      // Handle castling.\n      if (movingPiece.toLowerCase() === \"k\" && Math.abs(col - selectedCell.col) === 2) {\n        if (col > selectedCell.col) {\n          newBoard[selectedCell.row][7] = \"\";\n          newBoard[selectedCell.row][5] = turn === \"white\" ? \"R\" : \"r\";\n        } else {\n          newBoard[selectedCell.row][0] = \"\";\n          newBoard[selectedCell.row][3] = turn === \"white\" ? \"R\" : \"r\";\n        }\n      }\n      setBoard(newBoard);\n      if (!(movingPiece.toLowerCase() === \"p\" && ((turn === \"white\" && row === 0) || (turn === \"black\" && row === 7)))) {\n        setTurn(turn === \"white\" ? \"black\" : \"white\");\n      }\n      setSelectedCell(null);\n      return;\n    }\n\n    // Select a piece.\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({ row, col });\n      }\n      return;\n    }\n    // If clicking another own piece, update selection.\n    if (board[row][col] !== \"\" && board[row][col] === board[row][col].toUpperCase() === (turn === \"white\")) {\n      setSelectedCell({ row, col });\n      return;\n    }\n    // Clicking outside valid available moves clears selection.\n    setSelectedCell(null);\n  };\n\n  const handlePromotionChoice = (choice) => {\n    const newBoard = board.map(r => [...r]);\n    const { row, col, color } = promotion;\n    const promotedPiece = color === \"white\" ? choice.toUpperCase() : choice.toLowerCase();\n    newBoard[row][col] = promotedPiece;\n    setBoard(newBoard);\n    setPromotion(null);\n    setTurn(turn === \"white\" ? \"black\" : \"white\");\n  };\n\n  const handleRestart = () => {\n    setBoard(initialBoard);\n    setTurn(\"white\");\n    setSelectedCell(null);\n    setAvailableMoves([]);\n    setGameOver(false);\n    setGameMessage(\"\");\n    setPromotion(null);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"chess-board\">\n        {board.map((rowData, rowIndex) =>\n          rowData.map((cellData, colIndex) => {\n            const isLight = (rowIndex + colIndex) % 2 === 0;\n            let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n            if (selectedCell && selectedCell.row === rowIndex && selectedCell.col === colIndex) {\n              cellClass += \" selected\";\n            }\n            if (availableMoves.some(move => move.row === rowIndex && move.col === colIndex)) {\n              cellClass += \" available\";\n            }\n            return (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={cellClass}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {cellData && (\n                  <span className={cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\"}>\n                    {pieceSymbols[cellData]}\n                  </span>\n                )}\n              </div>\n            );\n          })\n        )}\n      </div>\n      <div className=\"status\">\n        {!gameOver ? (\n          <p>Turn: {turn.charAt(0).toUpperCase() + turn.slice(1)}</p>\n        ) : (\n          <div>\n            <p>{gameMessage}</p>\n            <button onClick={handleRestart}>Restart Match</button>\n          </div>\n        )}\n      </div>\n\n      {promotion && (\n        <div className=\"promotion-modal\">\n          <div className=\"promotion-content\">\n            <p>Promote Pawn:</p>\n            {promotionOptions.map((option) => (\n              <button key={option} onClick={() => handlePromotionChoice(option)}>\n                {pieceSymbols[promotion.color === \"white\" ? option.toUpperCase() : option.toLowerCase()]}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}