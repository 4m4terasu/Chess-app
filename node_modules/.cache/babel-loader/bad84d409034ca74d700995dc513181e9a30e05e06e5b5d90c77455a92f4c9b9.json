{"ast":null,"code":"export function isValidMove(board, from, to, turn) {\n  const piece = board[from.row][from.col];\n  if (!piece) return false; // No piece to move\n\n  const isWhite = piece === piece.toUpperCase();\n  const isBlack = !isWhite;\n\n  // Ensure the correct player is moving\n  if (turn === \"white\" && !isWhite || turn === \"black\" && !isBlack) {\n    return false;\n  }\n  const targetPiece = board[to.row][to.col];\n  const isCapture = targetPiece !== \"\"; // If there's an opponent piece\n\n  // Prevent capturing own pieces\n  if (isCapture) {\n    const targetIsWhite = targetPiece === targetPiece.toUpperCase();\n    if (isWhite && targetIsWhite || isBlack && !targetIsWhite) {\n      return false;\n    }\n  }\n  const rowDiff = Math.abs(to.row - from.row);\n  const colDiff = Math.abs(to.col - from.col);\n\n  // PAWN MOVEMENT\n  if (piece.toLowerCase() === \"p\") {\n    const direction = isWhite ? -1 : 1;\n    const startRow = isWhite ? 6 : 1;\n\n    // Standard move (one step forward)\n    if (to.row === from.row + direction && to.col === from.col && !targetPiece) {\n      return true;\n    }\n\n    // Double move from starting position\n    if (from.row === startRow && to.row === from.row + 2 * direction && to.col === from.col && !board[to.row][to.col] && !board[from.row + direction][to.col]) {\n      return true;\n    }\n\n    // Capture diagonally\n    if (to.row === from.row + direction && Math.abs(to.col - from.col) === 1 && isCapture) {\n      return true;\n    }\n  }\n\n  // ROOK MOVEMENT\n  if (piece.toLowerCase() === \"r\") {\n    if (from.row === to.row) {\n      for (let col = Math.min(from.col, to.col) + 1; col < Math.max(from.col, to.col); col++) {\n        if (board[from.row][col]) return false;\n      }\n      return true;\n    }\n    if (from.col === to.col) {\n      for (let row = Math.min(from.row, to.row) + 1; row < Math.max(from.row, to.row); row++) {\n        if (board[row][from.col]) return false;\n      }\n      return true;\n    }\n  }\n\n  // KNIGHT MOVEMENT\n  if (piece.toLowerCase() === \"n\") {\n    if (rowDiff === 2 && colDiff === 1 || rowDiff === 1 && colDiff === 2) {\n      return true;\n    }\n  }\n\n  // BISHOP MOVEMENT\n  if (piece.toLowerCase() === \"b\") {\n    if (rowDiff === colDiff) {\n      let rowStep = to.row > from.row ? 1 : -1;\n      let colStep = to.col > from.col ? 1 : -1;\n      let row = from.row + rowStep;\n      let col = from.col + colStep;\n      while (row !== to.row && col !== to.col) {\n        if (board[row][col]) return false;\n        row += rowStep;\n        col += colStep;\n      }\n      return true;\n    }\n  }\n\n  // QUEEN MOVEMENT (FIXED)\n  if (piece.toLowerCase() === \"q\") {\n    if (from.row === to.row || from.col === to.col) {\n      return isValidMove(board, from, to, turn); // Rook-like move\n    }\n    if (Math.abs(to.row - from.row) === Math.abs(to.col - from.col)) {\n      return isValidMove(board, from, to, turn); // Bishop-like move\n    }\n    return false;\n  }\n\n  // KING MOVEMENT\n  if (piece.toLowerCase() === \"k\") {\n    if (rowDiff <= 1 && colDiff <= 1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Function to switch turns properly.\n */\nexport function switchTurn(currentTurn) {\n  return currentTurn === \"white\" ? \"black\" : \"white\";\n}","map":{"version":3,"names":["isValidMove","board","from","to","turn","piece","row","col","isWhite","toUpperCase","isBlack","targetPiece","isCapture","targetIsWhite","rowDiff","Math","abs","colDiff","toLowerCase","direction","startRow","min","max","rowStep","colStep","switchTurn","currentTurn"],"sources":["/Users/mikeb/CV_projects/chess-app/src/utils/chessLogic.js"],"sourcesContent":["export function isValidMove(board, from, to, turn) {\n    const piece = board[from.row][from.col];\n    if (!piece) return false; // No piece to move\n  \n    const isWhite = piece === piece.toUpperCase();\n    const isBlack = !isWhite;\n  \n    // Ensure the correct player is moving\n    if ((turn === \"white\" && !isWhite) || (turn === \"black\" && !isBlack)) {\n      return false;\n    }\n  \n    const targetPiece = board[to.row][to.col];\n    const isCapture = targetPiece !== \"\"; // If there's an opponent piece\n  \n    // Prevent capturing own pieces\n    if (isCapture) {\n      const targetIsWhite = targetPiece === targetPiece.toUpperCase();\n      if ((isWhite && targetIsWhite) || (isBlack && !targetIsWhite)) {\n        return false;\n      }\n    }\n  \n    const rowDiff = Math.abs(to.row - from.row);\n    const colDiff = Math.abs(to.col - from.col);\n  \n    // PAWN MOVEMENT\n    if (piece.toLowerCase() === \"p\") {\n      const direction = isWhite ? -1 : 1;\n      const startRow = isWhite ? 6 : 1;\n  \n      // Standard move (one step forward)\n      if (to.row === from.row + direction && to.col === from.col && !targetPiece) {\n        return true;\n      }\n  \n      // Double move from starting position\n      if (from.row === startRow && to.row === from.row + 2 * direction && to.col === from.col && !board[to.row][to.col] && !board[from.row + direction][to.col]) {\n        return true;\n      }\n  \n      // Capture diagonally\n      if (to.row === from.row + direction && Math.abs(to.col - from.col) === 1 && isCapture) {\n        return true;\n      }\n    }\n  \n    // ROOK MOVEMENT\n    if (piece.toLowerCase() === \"r\") {\n      if (from.row === to.row) {\n        for (let col = Math.min(from.col, to.col) + 1; col < Math.max(from.col, to.col); col++) {\n          if (board[from.row][col]) return false;\n        }\n        return true;\n      }\n      if (from.col === to.col) {\n        for (let row = Math.min(from.row, to.row) + 1; row < Math.max(from.row, to.row); row++) {\n          if (board[row][from.col]) return false;\n        }\n        return true;\n      }\n    }\n  \n    // KNIGHT MOVEMENT\n    if (piece.toLowerCase() === \"n\") {\n      if ((rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2)) {\n        return true;\n      }\n    }\n  \n    // BISHOP MOVEMENT\n    if (piece.toLowerCase() === \"b\") {\n      if (rowDiff === colDiff) {\n        let rowStep = to.row > from.row ? 1 : -1;\n        let colStep = to.col > from.col ? 1 : -1;\n        let row = from.row + rowStep;\n        let col = from.col + colStep;\n        while (row !== to.row && col !== to.col) {\n          if (board[row][col]) return false;\n          row += rowStep;\n          col += colStep;\n        }\n        return true;\n      }\n    }\n  \n    // QUEEN MOVEMENT (FIXED)\n    if (piece.toLowerCase() === \"q\") {\n      if (from.row === to.row || from.col === to.col) {\n        return isValidMove(board, from, to, turn); // Rook-like move\n      }\n      if (Math.abs(to.row - from.row) === Math.abs(to.col - from.col)) {\n        return isValidMove(board, from, to, turn); // Bishop-like move\n      }\n      return false;\n    }\n  \n    // KING MOVEMENT\n    if (piece.toLowerCase() === \"k\") {\n      if (rowDiff <= 1 && colDiff <= 1) {\n        return true;\n      }\n    }\n  \n    return false;\n  }\n  \n  /**\n   * Function to switch turns properly.\n   */\n  export function switchTurn(currentTurn) {\n    return currentTurn === \"white\" ? \"black\" : \"white\";\n  }\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}