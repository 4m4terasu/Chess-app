{"ast":null,"code":"var _jsxFileName = \"/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst promotionOptions = [\"q\", \"r\", \"b\", \"n\"];\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [availableMoves, setAvailableMoves] = useState([]);\n  const [turn, setTurn] = useState(\"white\");\n  const [gameOver, setGameOver] = useState(false);\n  const [gameMessage, setGameMessage] = useState(\"\");\n  const [promotion, setPromotion] = useState(null);\n  const [flipBoard, setFlipBoard] = useState(false);\n  const [showRestartConfirm, setShowRestartConfirm] = useState(false);\n\n  // Audio refs for sound effects\n  const moveCheckSoundRef = useRef(new Audio('/sounds/move-check.mp3'));\n  const moveSelfSoundRef = useRef(new Audio('/sounds/move-self.mp3'));\n  const captureSoundRef = useRef(new Audio('/sounds/capture.mp3'));\n  const castleSoundRef = useRef(new Audio('/sounds/castle.mp3'));\n  const promotionSoundRef = useRef(new Audio('/sounds/promotion.mp3'));\n  const notifySoundRef = useRef(new Audio('/sounds/notify.mp3'));\n\n  // Modified playSound: checks source and handles errors.\n  const playSound = soundRef => {\n    if (soundRef.current && soundRef.current.src) {\n      if (soundRef.current.error) return;\n      try {\n        soundRef.current.currentTime = 0;\n        soundRef.current.play().catch(err => {\n          console.error(\"Audio play error:\", err);\n        });\n      } catch (err) {\n        console.error(\"Audio playback error:\", err);\n      }\n    }\n  };\n\n  // Compute available moves when a piece is selected.\n  useEffect(() => {\n    if (selectedCell) {\n      const moves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedCell, {\n            row,\n            col\n          }, turn, [])) {\n            moves.push({\n              row,\n              col\n            });\n          }\n        }\n      }\n      setAvailableMoves(moves);\n    } else {\n      setAvailableMoves([]);\n    }\n  }, [selectedCell, board, turn]);\n\n  // Check game status after every move.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      playSound(notifySoundRef);\n      setGameOver(true);\n    }\n  }, [board, turn]);\n\n  // Transform displayed coordinates to board coordinates if board is flipped.\n  const transformCoordinates = (row, col) => {\n    if (!flipBoard) return {\n      row,\n      col\n    };\n    return {\n      row: 7 - row,\n      col\n    };\n  };\n\n  // For rendering: if board is flipped, render rows in reverse order.\n  const renderRows = flipBoard ? [...board].reverse() : board;\n  const handleCellClick = (displayRow, displayCol) => {\n    if (gameOver || promotion || showRestartConfirm) return;\n    const {\n      row,\n      col\n    } = transformCoordinates(displayRow, displayCol);\n\n    // If clicking an available move:\n    if (selectedCell && availableMoves.some(move => move.row === row && move.col === col)) {\n      const newBoard = board.map(r => [...r]);\n      const movingPiece = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n      let soundPlayed = false;\n\n      // Determine if capture occurs.\n      if (newBoard[row][col] !== \"\") {\n        playSound(captureSoundRef);\n        soundPlayed = true;\n      }\n\n      // Check for pawn promotion.\n      if (movingPiece.toLowerCase() === \"p\" && (turn === \"white\" && row === 0 || turn === \"black\" && row === 7)) {\n        newBoard[row][col] = movingPiece; // temporarily place pawn\n        setPromotion({\n          row,\n          col,\n          color: turn,\n          piece: movingPiece\n        });\n        soundPlayed = true; // promotion sound will be played upon choice.\n      } else {\n        newBoard[row][col] = movingPiece;\n      }\n\n      // Handle castling.\n      if (movingPiece.toLowerCase() === \"k\" && Math.abs(col - selectedCell.col) === 2) {\n        playSound(castleSoundRef);\n        soundPlayed = true;\n        if (col > selectedCell.col) {\n          // King-side castling: move rook from column 7 to column 5.\n          newBoard[selectedCell.row][7] = \"\";\n          newBoard[selectedCell.row][5] = turn === \"white\" ? \"R\" : \"r\";\n        } else {\n          // Queen-side castling: move rook from column 0 to column 3.\n          newBoard[selectedCell.row][0] = \"\";\n          newBoard[selectedCell.row][3] = turn === \"white\" ? \"R\" : \"r\";\n        }\n      }\n      setBoard(newBoard);\n\n      // If no capture, castling, or promotion occurred, decide which move sound to play.\n      if (!soundPlayed) {\n        const nextTurn = turn === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(newBoard, nextTurn)) {\n          playSound(moveCheckSoundRef);\n        } else {\n          playSound(moveSelfSoundRef);\n        }\n      }\n      if (!(movingPiece.toLowerCase() === \"p\" && (turn === \"white\" && row === 0 || turn === \"black\" && row === 7))) {\n        setTurn(turn === \"white\" ? \"black\" : \"white\");\n      }\n      setSelectedCell(null);\n      return;\n    }\n\n    // Select a piece.\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({\n          row,\n          col\n        });\n      }\n      return;\n    }\n    // If clicking another own piece, update selection.\n    if (board[row][col] !== \"\" && (turn === \"white\" && board[row][col] === board[row][col].toUpperCase() || turn === \"black\" && board[row][col] === board[row][col].toLowerCase())) {\n      setSelectedCell({\n        row,\n        col\n      });\n      return;\n    }\n    // Otherwise, clear selection.\n    setSelectedCell(null);\n  };\n  const handlePromotionChoice = choice => {\n    const newBoard = board.map(r => [...r]);\n    const {\n      row,\n      col,\n      color\n    } = promotion;\n    const promotedPiece = color === \"white\" ? choice.toUpperCase() : choice.toLowerCase();\n    newBoard[row][col] = promotedPiece;\n    playSound(promotionSoundRef);\n    setBoard(newBoard);\n    setPromotion(null);\n    setTurn(turn === \"white\" ? \"black\" : \"white\");\n  };\n  const handleRestart = () => {\n    setShowRestartConfirm(true);\n    playSound(notifySoundRef);\n  };\n  const confirmRestart = confirm => {\n    if (confirm) {\n      setBoard(initialBoard);\n      setTurn(\"white\");\n      setSelectedCell(null);\n      setAvailableMoves([]);\n      setGameOver(false);\n      setGameMessage(\"\");\n      setPromotion(null);\n    }\n    setShowRestartConfirm(false);\n  };\n  const handleSwitchSide = () => {\n    setFlipBoard(!flipBoard);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        children: \"Restart Match\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSwitchSide,\n        children: \"Switch Side\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-board\",\n      children: renderRows.map((rowData, displayRow) => rowData.map((cellData, displayCol) => {\n        const {\n          row,\n          col\n        } = transformCoordinates(displayRow, displayCol);\n        const isLight = (row + col) % 2 === 0;\n        let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n        if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\n          cellClass += \" selected\";\n        }\n        if (availableMoves.some(move => move.row === row && move.col === col)) {\n          cellClass += \" available\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cellClass,\n          onClick: () => handleCellClick(displayRow, displayCol),\n          children: cellData && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\",\n            children: pieceSymbols[cellData]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 19\n          }, this)\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turn: \", turn.charAt(0).toUpperCase() + turn.slice(1)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), promotion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"promotion-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"promotion-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Promote Pawn:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), promotionOptions.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePromotionChoice(option),\n          children: pieceSymbols[promotion.color === \"white\" ? option.toUpperCase() : option.toLowerCase()]\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }, this), showRestartConfirm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirm-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirm-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to restart the match?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => confirmRestart(true),\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => confirmRestart(false),\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"6k6otJXkrdUBNsglJgANetBzUlg=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","initialBoard","pieceSymbols","isValidMove","isGameOver","isKingInCheck","jsxDEV","_jsxDEV","promotionOptions","ChessBoard","_s","board","setBoard","selectedCell","setSelectedCell","availableMoves","setAvailableMoves","turn","setTurn","gameOver","setGameOver","gameMessage","setGameMessage","promotion","setPromotion","flipBoard","setFlipBoard","showRestartConfirm","setShowRestartConfirm","moveCheckSoundRef","Audio","moveSelfSoundRef","captureSoundRef","castleSoundRef","promotionSoundRef","notifySoundRef","playSound","soundRef","current","src","error","currentTime","play","catch","err","console","moves","row","col","push","winner","transformCoordinates","renderRows","reverse","handleCellClick","displayRow","displayCol","some","move","newBoard","map","r","movingPiece","soundPlayed","toLowerCase","color","piece","Math","abs","nextTurn","toUpperCase","handlePromotionChoice","choice","promotedPiece","handleRestart","confirmRestart","confirm","handleSwitchSide","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","rowData","cellData","isLight","cellClass","charAt","slice","option","_c","$RefreshReg$"],"sources":["/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\n\nconst promotionOptions = [\"q\", \"r\", \"b\", \"n\"];\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [availableMoves, setAvailableMoves] = useState([]);\n  const [turn, setTurn] = useState(\"white\");\n  const [gameOver, setGameOver] = useState(false);\n  const [gameMessage, setGameMessage] = useState(\"\");\n  const [promotion, setPromotion] = useState(null);\n  const [flipBoard, setFlipBoard] = useState(false);\n  const [showRestartConfirm, setShowRestartConfirm] = useState(false);\n\n  // Audio refs for sound effects\n  const moveCheckSoundRef = useRef(new Audio('/sounds/move-check.mp3'));\n  const moveSelfSoundRef = useRef(new Audio('/sounds/move-self.mp3'));\n  const captureSoundRef = useRef(new Audio('/sounds/capture.mp3'));\n  const castleSoundRef = useRef(new Audio('/sounds/castle.mp3'));\n  const promotionSoundRef = useRef(new Audio('/sounds/promotion.mp3'));\n  const notifySoundRef = useRef(new Audio('/sounds/notify.mp3'));\n\n  // Modified playSound: checks source and handles errors.\n  const playSound = (soundRef) => {\n    if (soundRef.current && soundRef.current.src) {\n      if (soundRef.current.error) return;\n      try {\n        soundRef.current.currentTime = 0;\n        soundRef.current.play().catch(err => {\n          console.error(\"Audio play error:\", err);\n        });\n      } catch (err) {\n        console.error(\"Audio playback error:\", err);\n      }\n    }\n  };\n\n  // Compute available moves when a piece is selected.\n  useEffect(() => {\n    if (selectedCell) {\n      const moves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedCell, { row, col }, turn, [])) {\n            moves.push({ row, col });\n          }\n        }\n      }\n      setAvailableMoves(moves);\n    } else {\n      setAvailableMoves([]);\n    }\n  }, [selectedCell, board, turn]);\n\n  // Check game status after every move.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      playSound(notifySoundRef);\n      setGameOver(true);\n    }\n  }, [board, turn]);\n\n  // Transform displayed coordinates to board coordinates if board is flipped.\n  const transformCoordinates = (row, col) => {\n    if (!flipBoard) return { row, col };\n    return { row: 7 - row, col };\n  };\n\n  // For rendering: if board is flipped, render rows in reverse order.\n  const renderRows = flipBoard ? [...board].reverse() : board;\n\n  const handleCellClick = (displayRow, displayCol) => {\n    if (gameOver || promotion || showRestartConfirm) return;\n    const { row, col } = transformCoordinates(displayRow, displayCol);\n\n    // If clicking an available move:\n    if (selectedCell && availableMoves.some(move => move.row === row && move.col === col)) {\n      const newBoard = board.map(r => [...r]);\n      const movingPiece = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n\n      let soundPlayed = false;\n\n      // Determine if capture occurs.\n      if (newBoard[row][col] !== \"\") {\n        playSound(captureSoundRef);\n        soundPlayed = true;\n      }\n\n      // Check for pawn promotion.\n      if (\n        movingPiece.toLowerCase() === \"p\" &&\n        ((turn === \"white\" && row === 0) || (turn === \"black\" && row === 7))\n      ) {\n        newBoard[row][col] = movingPiece; // temporarily place pawn\n        setPromotion({ row, col, color: turn, piece: movingPiece });\n        soundPlayed = true; // promotion sound will be played upon choice.\n      } else {\n        newBoard[row][col] = movingPiece;\n      }\n\n      // Handle castling.\n      if (movingPiece.toLowerCase() === \"k\" && Math.abs(col - selectedCell.col) === 2) {\n        playSound(castleSoundRef);\n        soundPlayed = true;\n        if (col > selectedCell.col) {\n          // King-side castling: move rook from column 7 to column 5.\n          newBoard[selectedCell.row][7] = \"\";\n          newBoard[selectedCell.row][5] = turn === \"white\" ? \"R\" : \"r\";\n        } else {\n          // Queen-side castling: move rook from column 0 to column 3.\n          newBoard[selectedCell.row][0] = \"\";\n          newBoard[selectedCell.row][3] = turn === \"white\" ? \"R\" : \"r\";\n        }\n      }\n\n      setBoard(newBoard);\n\n      // If no capture, castling, or promotion occurred, decide which move sound to play.\n      if (!soundPlayed) {\n        const nextTurn = turn === \"white\" ? \"black\" : \"white\";\n        if (isKingInCheck(newBoard, nextTurn)) {\n          playSound(moveCheckSoundRef);\n        } else {\n          playSound(moveSelfSoundRef);\n        }\n      }\n\n      if (!(movingPiece.toLowerCase() === \"p\" && ((turn === \"white\" && row === 0) || (turn === \"black\" && row === 7)))) {\n        setTurn(turn === \"white\" ? \"black\" : \"white\");\n      }\n      setSelectedCell(null);\n      return;\n    }\n\n    // Select a piece.\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({ row, col });\n      }\n      return;\n    }\n    // If clicking another own piece, update selection.\n    if (\n      board[row][col] !== \"\" &&\n      ((turn === \"white\" && board[row][col] === board[row][col].toUpperCase()) ||\n        (turn === \"black\" && board[row][col] === board[row][col].toLowerCase()))\n    ) {\n      setSelectedCell({ row, col });\n      return;\n    }\n    // Otherwise, clear selection.\n    setSelectedCell(null);\n  };\n\n  const handlePromotionChoice = (choice) => {\n    const newBoard = board.map(r => [...r]);\n    const { row, col, color } = promotion;\n    const promotedPiece = color === \"white\" ? choice.toUpperCase() : choice.toLowerCase();\n    newBoard[row][col] = promotedPiece;\n    playSound(promotionSoundRef);\n    setBoard(newBoard);\n    setPromotion(null);\n    setTurn(turn === \"white\" ? \"black\" : \"white\");\n  };\n\n  const handleRestart = () => {\n    setShowRestartConfirm(true);\n    playSound(notifySoundRef);\n  };\n\n  const confirmRestart = (confirm) => {\n    if (confirm) {\n      setBoard(initialBoard);\n      setTurn(\"white\");\n      setSelectedCell(null);\n      setAvailableMoves([]);\n      setGameOver(false);\n      setGameMessage(\"\");\n      setPromotion(null);\n    }\n    setShowRestartConfirm(false);\n  };\n\n  const handleSwitchSide = () => {\n    setFlipBoard(!flipBoard);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"controls\">\n        <button onClick={handleRestart}>Restart Match</button>\n        <button onClick={handleSwitchSide}>Switch Side</button>\n      </div>\n      <div className=\"chess-board\">\n        {renderRows.map((rowData, displayRow) =>\n          rowData.map((cellData, displayCol) => {\n            const { row, col } = transformCoordinates(displayRow, displayCol);\n            const isLight = (row + col) % 2 === 0;\n            let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n            if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\n              cellClass += \" selected\";\n            }\n            if (availableMoves.some(move => move.row === row && move.col === col)) {\n              cellClass += \" available\";\n            }\n            return (\n              <div\n                key={`${row}-${col}`}\n                className={cellClass}\n                onClick={() => handleCellClick(displayRow, displayCol)}\n              >\n                {cellData && (\n                  <span className={cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\"}>\n                    {pieceSymbols[cellData]}\n                  </span>\n                )}\n              </div>\n            );\n          })\n        )}\n      </div>\n      <div className=\"status\">\n        {!gameOver ? (\n          <p>Turn: {turn.charAt(0).toUpperCase() + turn.slice(1)}</p>\n        ) : (\n          <div>\n            <p>{gameMessage}</p>\n          </div>\n        )}\n      </div>\n\n      {promotion && (\n        <div className=\"promotion-modal\">\n          <div className=\"promotion-content\">\n            <p>Promote Pawn:</p>\n            {promotionOptions.map((option) => (\n              <button key={option} onClick={() => handlePromotionChoice(option)}>\n                {pieceSymbols[promotion.color === \"white\" ? option.toUpperCase() : option.toLowerCase()]}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {showRestartConfirm && (\n        <div className=\"confirm-modal\">\n          <div className=\"confirm-content\">\n            <p>Are you sure you want to restart the match?</p>\n            <button onClick={() => confirmRestart(true)}>Yes</button>\n            <button onClick={() => confirmRestart(false)}>No</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,YAAY,EAAEC,YAAY,QAAQ,gBAAgB;AAC3D,SAASC,WAAW,EAAEC,UAAU,EAAEC,aAAa,QAAQ,qBAAqB;AAC5E,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE7C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAACG,YAAY,CAAC;EAChD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACiB,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAC,OAAO,CAAC;EACzC,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC2B,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC6B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;;EAEnE;EACA,MAAM+B,iBAAiB,GAAG7B,MAAM,CAAC,IAAI8B,KAAK,CAAC,wBAAwB,CAAC,CAAC;EACrE,MAAMC,gBAAgB,GAAG/B,MAAM,CAAC,IAAI8B,KAAK,CAAC,uBAAuB,CAAC,CAAC;EACnE,MAAME,eAAe,GAAGhC,MAAM,CAAC,IAAI8B,KAAK,CAAC,qBAAqB,CAAC,CAAC;EAChE,MAAMG,cAAc,GAAGjC,MAAM,CAAC,IAAI8B,KAAK,CAAC,oBAAoB,CAAC,CAAC;EAC9D,MAAMI,iBAAiB,GAAGlC,MAAM,CAAC,IAAI8B,KAAK,CAAC,uBAAuB,CAAC,CAAC;EACpE,MAAMK,cAAc,GAAGnC,MAAM,CAAC,IAAI8B,KAAK,CAAC,oBAAoB,CAAC,CAAC;;EAE9D;EACA,MAAMM,SAAS,GAAIC,QAAQ,IAAK;IAC9B,IAAIA,QAAQ,CAACC,OAAO,IAAID,QAAQ,CAACC,OAAO,CAACC,GAAG,EAAE;MAC5C,IAAIF,QAAQ,CAACC,OAAO,CAACE,KAAK,EAAE;MAC5B,IAAI;QACFH,QAAQ,CAACC,OAAO,CAACG,WAAW,GAAG,CAAC;QAChCJ,QAAQ,CAACC,OAAO,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;UACnCC,OAAO,CAACL,KAAK,CAAC,mBAAmB,EAAEI,GAAG,CAAC;QACzC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOA,GAAG,EAAE;QACZC,OAAO,CAACL,KAAK,CAAC,uBAAuB,EAAEI,GAAG,CAAC;MAC7C;IACF;EACF,CAAC;;EAED;EACA7C,SAAS,CAAC,MAAM;IACd,IAAIc,YAAY,EAAE;MAChB,MAAMiC,KAAK,GAAG,EAAE;MAChB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;UAChC,IAAI7C,WAAW,CAACQ,KAAK,EAAEE,YAAY,EAAE;YAAEkC,GAAG;YAAEC;UAAI,CAAC,EAAE/B,IAAI,EAAE,EAAE,CAAC,EAAE;YAC5D6B,KAAK,CAACG,IAAI,CAAC;cAAEF,GAAG;cAAEC;YAAI,CAAC,CAAC;UAC1B;QACF;MACF;MACAhC,iBAAiB,CAAC8B,KAAK,CAAC;IAC1B,CAAC,MAAM;MACL9B,iBAAiB,CAAC,EAAE,CAAC;IACvB;EACF,CAAC,EAAE,CAACH,YAAY,EAAEF,KAAK,EAAEM,IAAI,CAAC,CAAC;;EAE/B;EACAlB,SAAS,CAAC,MAAM;IACd,IAAIK,UAAU,CAACO,KAAK,EAAEM,IAAI,CAAC,EAAE;MAC3B,IAAIZ,aAAa,CAACM,KAAK,EAAEM,IAAI,CAAC,EAAE;QAC9B,MAAMiC,MAAM,GAAGjC,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO;QACnDK,cAAc,CAAC,cAAc4B,MAAM,QAAQ,CAAC;MAC9C,CAAC,MAAM;QACL5B,cAAc,CAAC,yBAAyB,CAAC;MAC3C;MACAc,SAAS,CAACD,cAAc,CAAC;MACzBf,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,CAACT,KAAK,EAAEM,IAAI,CAAC,CAAC;;EAEjB;EACA,MAAMkC,oBAAoB,GAAGA,CAACJ,GAAG,EAAEC,GAAG,KAAK;IACzC,IAAI,CAACvB,SAAS,EAAE,OAAO;MAAEsB,GAAG;MAAEC;IAAI,CAAC;IACnC,OAAO;MAAED,GAAG,EAAE,CAAC,GAAGA,GAAG;MAAEC;IAAI,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMI,UAAU,GAAG3B,SAAS,GAAG,CAAC,GAAGd,KAAK,CAAC,CAAC0C,OAAO,CAAC,CAAC,GAAG1C,KAAK;EAE3D,MAAM2C,eAAe,GAAGA,CAACC,UAAU,EAAEC,UAAU,KAAK;IAClD,IAAIrC,QAAQ,IAAII,SAAS,IAAII,kBAAkB,EAAE;IACjD,MAAM;MAAEoB,GAAG;MAAEC;IAAI,CAAC,GAAGG,oBAAoB,CAACI,UAAU,EAAEC,UAAU,CAAC;;IAEjE;IACA,IAAI3C,YAAY,IAAIE,cAAc,CAAC0C,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACX,GAAG,KAAKA,GAAG,IAAIW,IAAI,CAACV,GAAG,KAAKA,GAAG,CAAC,EAAE;MACrF,MAAMW,QAAQ,GAAGhD,KAAK,CAACiD,GAAG,CAACC,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC,CAAC;MACvC,MAAMC,WAAW,GAAGnD,KAAK,CAACE,YAAY,CAACkC,GAAG,CAAC,CAAClC,YAAY,CAACmC,GAAG,CAAC;MAC7DW,QAAQ,CAAC9C,YAAY,CAACkC,GAAG,CAAC,CAAClC,YAAY,CAACmC,GAAG,CAAC,GAAG,EAAE;MAEjD,IAAIe,WAAW,GAAG,KAAK;;MAEvB;MACA,IAAIJ,QAAQ,CAACZ,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,EAAE,EAAE;QAC7BZ,SAAS,CAACJ,eAAe,CAAC;QAC1B+B,WAAW,GAAG,IAAI;MACpB;;MAEA;MACA,IACED,WAAW,CAACE,WAAW,CAAC,CAAC,KAAK,GAAG,KAC/B/C,IAAI,KAAK,OAAO,IAAI8B,GAAG,KAAK,CAAC,IAAM9B,IAAI,KAAK,OAAO,IAAI8B,GAAG,KAAK,CAAE,CAAC,EACpE;QACAY,QAAQ,CAACZ,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGc,WAAW,CAAC,CAAC;QAClCtC,YAAY,CAAC;UAAEuB,GAAG;UAAEC,GAAG;UAAEiB,KAAK,EAAEhD,IAAI;UAAEiD,KAAK,EAAEJ;QAAY,CAAC,CAAC;QAC3DC,WAAW,GAAG,IAAI,CAAC,CAAC;MACtB,CAAC,MAAM;QACLJ,QAAQ,CAACZ,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGc,WAAW;MAClC;;MAEA;MACA,IAAIA,WAAW,CAACE,WAAW,CAAC,CAAC,KAAK,GAAG,IAAIG,IAAI,CAACC,GAAG,CAACpB,GAAG,GAAGnC,YAAY,CAACmC,GAAG,CAAC,KAAK,CAAC,EAAE;QAC/EZ,SAAS,CAACH,cAAc,CAAC;QACzB8B,WAAW,GAAG,IAAI;QAClB,IAAIf,GAAG,GAAGnC,YAAY,CAACmC,GAAG,EAAE;UAC1B;UACAW,QAAQ,CAAC9C,YAAY,CAACkC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;UAClCY,QAAQ,CAAC9C,YAAY,CAACkC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG9B,IAAI,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;QAC9D,CAAC,MAAM;UACL;UACA0C,QAAQ,CAAC9C,YAAY,CAACkC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;UAClCY,QAAQ,CAAC9C,YAAY,CAACkC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG9B,IAAI,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG;QAC9D;MACF;MAEAL,QAAQ,CAAC+C,QAAQ,CAAC;;MAElB;MACA,IAAI,CAACI,WAAW,EAAE;QAChB,MAAMM,QAAQ,GAAGpD,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO;QACrD,IAAIZ,aAAa,CAACsD,QAAQ,EAAEU,QAAQ,CAAC,EAAE;UACrCjC,SAAS,CAACP,iBAAiB,CAAC;QAC9B,CAAC,MAAM;UACLO,SAAS,CAACL,gBAAgB,CAAC;QAC7B;MACF;MAEA,IAAI,EAAE+B,WAAW,CAACE,WAAW,CAAC,CAAC,KAAK,GAAG,KAAM/C,IAAI,KAAK,OAAO,IAAI8B,GAAG,KAAK,CAAC,IAAM9B,IAAI,KAAK,OAAO,IAAI8B,GAAG,KAAK,CAAE,CAAC,CAAC,EAAE;QAChH7B,OAAO,CAACD,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;MAC/C;MACAH,eAAe,CAAC,IAAI,CAAC;MACrB;IACF;;IAEA;IACA,IAAI,CAACD,YAAY,EAAE;MACjB,IAAIF,KAAK,CAACoC,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,EAAE,EAAE;QAC1BlC,eAAe,CAAC;UAAEiC,GAAG;UAAEC;QAAI,CAAC,CAAC;MAC/B;MACA;IACF;IACA;IACA,IACErC,KAAK,CAACoC,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,EAAE,KACpB/B,IAAI,KAAK,OAAO,IAAIN,KAAK,CAACoC,GAAG,CAAC,CAACC,GAAG,CAAC,KAAKrC,KAAK,CAACoC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACsB,WAAW,CAAC,CAAC,IACpErD,IAAI,KAAK,OAAO,IAAIN,KAAK,CAACoC,GAAG,CAAC,CAACC,GAAG,CAAC,KAAKrC,KAAK,CAACoC,GAAG,CAAC,CAACC,GAAG,CAAC,CAACgB,WAAW,CAAC,CAAE,CAAC,EAC1E;MACAlD,eAAe,CAAC;QAAEiC,GAAG;QAAEC;MAAI,CAAC,CAAC;MAC7B;IACF;IACA;IACAlC,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;EAED,MAAMyD,qBAAqB,GAAIC,MAAM,IAAK;IACxC,MAAMb,QAAQ,GAAGhD,KAAK,CAACiD,GAAG,CAACC,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC,CAAC;IACvC,MAAM;MAAEd,GAAG;MAAEC,GAAG;MAAEiB;IAAM,CAAC,GAAG1C,SAAS;IACrC,MAAMkD,aAAa,GAAGR,KAAK,KAAK,OAAO,GAAGO,MAAM,CAACF,WAAW,CAAC,CAAC,GAAGE,MAAM,CAACR,WAAW,CAAC,CAAC;IACrFL,QAAQ,CAACZ,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGyB,aAAa;IAClCrC,SAAS,CAACF,iBAAiB,CAAC;IAC5BtB,QAAQ,CAAC+C,QAAQ,CAAC;IAClBnC,YAAY,CAAC,IAAI,CAAC;IAClBN,OAAO,CAACD,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;EAC/C,CAAC;EAED,MAAMyD,aAAa,GAAGA,CAAA,KAAM;IAC1B9C,qBAAqB,CAAC,IAAI,CAAC;IAC3BQ,SAAS,CAACD,cAAc,CAAC;EAC3B,CAAC;EAED,MAAMwC,cAAc,GAAIC,OAAO,IAAK;IAClC,IAAIA,OAAO,EAAE;MACXhE,QAAQ,CAACX,YAAY,CAAC;MACtBiB,OAAO,CAAC,OAAO,CAAC;MAChBJ,eAAe,CAAC,IAAI,CAAC;MACrBE,iBAAiB,CAAC,EAAE,CAAC;MACrBI,WAAW,CAAC,KAAK,CAAC;MAClBE,cAAc,CAAC,EAAE,CAAC;MAClBE,YAAY,CAAC,IAAI,CAAC;IACpB;IACAI,qBAAqB,CAAC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMiD,gBAAgB,GAAGA,CAAA,KAAM;IAC7BnD,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,oBACElB,OAAA;IAAKuE,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBxE,OAAA;MAAKuE,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBxE,OAAA;QAAQyE,OAAO,EAAEN,aAAc;QAAAK,QAAA,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACtD7E,OAAA;QAAQyE,OAAO,EAAEH,gBAAiB;QAAAE,QAAA,EAAC;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CAAC,eACN7E,OAAA;MAAKuE,SAAS,EAAC,aAAa;MAAAC,QAAA,EACzB3B,UAAU,CAACQ,GAAG,CAAC,CAACyB,OAAO,EAAE9B,UAAU,KAClC8B,OAAO,CAACzB,GAAG,CAAC,CAAC0B,QAAQ,EAAE9B,UAAU,KAAK;QACpC,MAAM;UAAET,GAAG;UAAEC;QAAI,CAAC,GAAGG,oBAAoB,CAACI,UAAU,EAAEC,UAAU,CAAC;QACjE,MAAM+B,OAAO,GAAG,CAACxC,GAAG,GAAGC,GAAG,IAAI,CAAC,KAAK,CAAC;QACrC,IAAIwC,SAAS,GAAG,QAAQD,OAAO,GAAG,OAAO,GAAG,MAAM,EAAE;QACpD,IAAI1E,YAAY,IAAIA,YAAY,CAACkC,GAAG,KAAKA,GAAG,IAAIlC,YAAY,CAACmC,GAAG,KAAKA,GAAG,EAAE;UACxEwC,SAAS,IAAI,WAAW;QAC1B;QACA,IAAIzE,cAAc,CAAC0C,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACX,GAAG,KAAKA,GAAG,IAAIW,IAAI,CAACV,GAAG,KAAKA,GAAG,CAAC,EAAE;UACrEwC,SAAS,IAAI,YAAY;QAC3B;QACA,oBACEjF,OAAA;UAEEuE,SAAS,EAAEU,SAAU;UACrBR,OAAO,EAAEA,CAAA,KAAM1B,eAAe,CAACC,UAAU,EAAEC,UAAU,CAAE;UAAAuB,QAAA,EAEtDO,QAAQ,iBACP/E,OAAA;YAAMuE,SAAS,EAAEQ,QAAQ,KAAKA,QAAQ,CAAChB,WAAW,CAAC,CAAC,GAAG,aAAa,GAAG,aAAc;YAAAS,QAAA,EAClF7E,YAAY,CAACoF,QAAQ;UAAC;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnB;QACP,GARI,GAAGrC,GAAG,IAAIC,GAAG,EAAE;UAAAiC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASjB,CAAC;MAEV,CAAC,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eACN7E,OAAA;MAAKuE,SAAS,EAAC,QAAQ;MAAAC,QAAA,EACpB,CAAC5D,QAAQ,gBACRZ,OAAA;QAAAwE,QAAA,GAAG,QAAM,EAAC9D,IAAI,CAACwE,MAAM,CAAC,CAAC,CAAC,CAACnB,WAAW,CAAC,CAAC,GAAGrD,IAAI,CAACyE,KAAK,CAAC,CAAC,CAAC;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,gBAE3D7E,OAAA;QAAAwE,QAAA,eACExE,OAAA;UAAAwE,QAAA,EAAI1D;QAAW;UAAA4D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,EAEL7D,SAAS,iBACRhB,OAAA;MAAKuE,SAAS,EAAC,iBAAiB;MAAAC,QAAA,eAC9BxE,OAAA;QAAKuE,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCxE,OAAA;UAAAwE,QAAA,EAAG;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,EACnB5E,gBAAgB,CAACoD,GAAG,CAAE+B,MAAM,iBAC3BpF,OAAA;UAAqByE,OAAO,EAAEA,CAAA,KAAMT,qBAAqB,CAACoB,MAAM,CAAE;UAAAZ,QAAA,EAC/D7E,YAAY,CAACqB,SAAS,CAAC0C,KAAK,KAAK,OAAO,GAAG0B,MAAM,CAACrB,WAAW,CAAC,CAAC,GAAGqB,MAAM,CAAC3B,WAAW,CAAC,CAAC;QAAC,GAD7E2B,MAAM;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEX,CACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAEAzD,kBAAkB,iBACjBpB,OAAA;MAAKuE,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5BxE,OAAA;QAAKuE,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9BxE,OAAA;UAAAwE,QAAA,EAAG;QAA2C;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAClD7E,OAAA;UAAQyE,OAAO,EAAEA,CAAA,KAAML,cAAc,CAAC,IAAI,CAAE;UAAAI,QAAA,EAAC;QAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzD7E,OAAA;UAAQyE,OAAO,EAAEA,CAAA,KAAML,cAAc,CAAC,KAAK,CAAE;UAAAI,QAAA,EAAC;QAAE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC1E,EAAA,CAnQID,UAAU;AAAAmF,EAAA,GAAVnF,UAAU;AAqQhB,eAAeA,UAAU;AAAC,IAAAmF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}