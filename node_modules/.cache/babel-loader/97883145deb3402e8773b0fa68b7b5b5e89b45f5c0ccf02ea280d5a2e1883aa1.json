{"ast":null,"code":"export function isValidMove(board, from, to, turn, moveHistory) {\n  const piece = board[from.row][from.col];\n  if (!piece) return false; // No piece to move\n\n  const isWhite = piece === piece.toUpperCase();\n  const isBlack = !isWhite;\n\n  // Ensure correct player turn\n  if (turn === \"white\" && !isWhite || turn === \"black\" && isBlack) {\n    return false;\n  }\n  const targetPiece = board[to.row][to.col];\n  const isCapture = targetPiece !== \"\";\n\n  // Prevent capturing own pieces\n  if (isCapture) {\n    const targetIsWhite = targetPiece === targetPiece.toUpperCase();\n    if (isWhite && targetIsWhite || isBlack && !targetIsWhite) {\n      return false;\n    }\n  }\n  const rowDiff = Math.abs(to.row - from.row);\n  const colDiff = Math.abs(to.col - from.col);\n\n  // 游댠 Prevent moving into check\n  if (wouldMoveCauseCheck(board, from, to, turn)) {\n    return false;\n  }\n\n  // 游릭 PAWN MOVEMENT\n  if (piece.toLowerCase() === \"p\") {\n    const direction = isWhite ? -1 : 1;\n    const startRow = isWhite ? 6 : 1;\n    if (to.row === from.row + direction && to.col === from.col && !targetPiece) {\n      return true;\n    }\n    if (from.row === startRow && to.row === from.row + 2 * direction && to.col === from.col && !board[to.row][to.col] && !board[from.row + direction][to.col]) {\n      return true;\n    }\n    if (to.row === from.row + direction && Math.abs(to.col - from.col) === 1 && isCapture) {\n      return true;\n    }\n\n    // En passant\n    if (moveHistory.length > 0) {\n      const lastMove = moveHistory[moveHistory.length - 1];\n      if (lastMove.piece.toLowerCase() === \"p\" && Math.abs(lastMove.from.row - lastMove.to.row) === 2) {\n        if (to.row === lastMove.to.row + direction && Math.abs(to.col - from.col) === 1 && to.col === lastMove.to.col) {\n          return true;\n        }\n      }\n    }\n  }\n\n  // 游릭 ROOK MOVEMENT\n  if (piece.toLowerCase() === \"r\") {\n    if (from.row === to.row) {\n      for (let col = Math.min(from.col, to.col) + 1; col < Math.max(from.col, to.col); col++) {\n        if (board[from.row][col]) return false;\n      }\n      return true;\n    }\n    if (from.col === to.col) {\n      for (let row = Math.min(from.row, to.row) + 1; row < Math.max(from.row, to.row); row++) {\n        if (board[row][from.col]) return false;\n      }\n      return true;\n    }\n  }\n\n  // 游릭 KNIGHT MOVEMENT\n  if (piece.toLowerCase() === \"n\") {\n    if (rowDiff === 2 && colDiff === 1 || rowDiff === 1 && colDiff === 2) {\n      return true;\n    }\n  }\n\n  // 游릭 BISHOP MOVEMENT\n  if (piece.toLowerCase() === \"b\") {\n    if (rowDiff === colDiff) {\n      let rowStep = to.row > from.row ? 1 : -1;\n      let colStep = to.col > from.col ? 1 : -1;\n      let row = from.row + rowStep;\n      let col = from.col + colStep;\n      while (row !== to.row && col !== to.col) {\n        if (board[row][col]) return false;\n        row += rowStep;\n        col += colStep;\n      }\n      return true;\n    }\n  }\n\n  // 游릭 QUEEN MOVEMENT (Fixed)\n  if (piece.toLowerCase() === \"q\") {\n    if (from.row === to.row || from.col === to.col) {\n      return isValidMove(board, from, to, turn, moveHistory);\n    }\n    if (Math.abs(to.row - from.row) === Math.abs(to.col - from.col)) {\n      return isValidMove(board, from, to, turn, moveHistory);\n    }\n    return false;\n  }\n\n  // 游릭 KING MOVEMENT\n  if (piece.toLowerCase() === \"k\") {\n    if (rowDiff <= 1 && colDiff <= 1) {\n      return true;\n    }\n\n    // Castling\n    if (!isKingInCheck(board, turn) && rowDiff === 0 && colDiff === 2) {\n      const rookCol = to.col > from.col ? 7 : 0;\n      const betweenCols = to.col > from.col ? [5, 6] : [1, 2, 3];\n      for (let col of betweenCols) {\n        if (board[from.row][col]) return false;\n      }\n      return true;\n    }\n  }\n  return false;\n}\nexport function isKingInCheck(board, turn) {\n  let kingPosition = null;\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === (turn === \"white\" ? \"K\" : \"k\")) {\n        kingPosition = {\n          row,\n          col\n        };\n        break;\n      }\n    }\n  }\n  if (!kingPosition) return false;\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && isValidMove(board, {\n        row,\n        col\n      }, kingPosition, turn === \"white\" ? \"black\" : \"white\", [])) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nexport function isGameOver(board, turn) {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] && (turn === \"white\" && board[row][col] === board[row][col].toUpperCase() || turn === \"black\" && board[row][col] === board[row][col].toLowerCase())) {\n        for (let targetRow = 0; targetRow < 8; targetRow++) {\n          for (let targetCol = 0; targetCol < 8; targetCol++) {\n            if (isValidMove(board, {\n              row,\n              col\n            }, {\n              row: targetRow,\n              col: targetCol\n            }, turn, [])) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["isValidMove","board","from","to","turn","moveHistory","piece","row","col","isWhite","toUpperCase","isBlack","targetPiece","isCapture","targetIsWhite","rowDiff","Math","abs","colDiff","wouldMoveCauseCheck","toLowerCase","direction","startRow","length","lastMove","min","max","rowStep","colStep","isKingInCheck","rookCol","betweenCols","kingPosition","isGameOver","targetRow","targetCol"],"sources":["/Users/mikeb/CV_projects/chess-app/src/utils/chessLogic.js"],"sourcesContent":["export function isValidMove(board, from, to, turn, moveHistory) {\n    const piece = board[from.row][from.col];\n    if (!piece) return false; // No piece to move\n  \n    const isWhite = piece === piece.toUpperCase();\n    const isBlack = !isWhite;\n  \n    // Ensure correct player turn\n    if ((turn === \"white\" && !isWhite) || (turn === \"black\" && isBlack)) {\n      return false;\n    }\n  \n    const targetPiece = board[to.row][to.col];\n    const isCapture = targetPiece !== \"\";\n  \n    // Prevent capturing own pieces\n    if (isCapture) {\n      const targetIsWhite = targetPiece === targetPiece.toUpperCase();\n      if ((isWhite && targetIsWhite) || (isBlack && !targetIsWhite)) {\n        return false;\n      }\n    }\n  \n    const rowDiff = Math.abs(to.row - from.row);\n    const colDiff = Math.abs(to.col - from.col);\n  \n    // 游댠 Prevent moving into check\n    if (wouldMoveCauseCheck(board, from, to, turn)) {\n      return false;\n    }\n  \n    // 游릭 PAWN MOVEMENT\n    if (piece.toLowerCase() === \"p\") {\n      const direction = isWhite ? -1 : 1;\n      const startRow = isWhite ? 6 : 1;\n  \n      if (to.row === from.row + direction && to.col === from.col && !targetPiece) {\n        return true;\n      }\n  \n      if (from.row === startRow && to.row === from.row + 2 * direction && to.col === from.col && !board[to.row][to.col] && !board[from.row + direction][to.col]) {\n        return true;\n      }\n  \n      if (to.row === from.row + direction && Math.abs(to.col - from.col) === 1 && isCapture) {\n        return true;\n      }\n  \n      // En passant\n      if (moveHistory.length > 0) {\n        const lastMove = moveHistory[moveHistory.length - 1];\n        if (lastMove.piece.toLowerCase() === \"p\" && Math.abs(lastMove.from.row - lastMove.to.row) === 2) {\n          if (to.row === lastMove.to.row + direction && Math.abs(to.col - from.col) === 1 && to.col === lastMove.to.col) {\n            return true;\n          }\n        }\n      }\n    }\n  \n    // 游릭 ROOK MOVEMENT\n    if (piece.toLowerCase() === \"r\") {\n      if (from.row === to.row) {\n        for (let col = Math.min(from.col, to.col) + 1; col < Math.max(from.col, to.col); col++) {\n          if (board[from.row][col]) return false;\n        }\n        return true;\n      }\n      if (from.col === to.col) {\n        for (let row = Math.min(from.row, to.row) + 1; row < Math.max(from.row, to.row); row++) {\n          if (board[row][from.col]) return false;\n        }\n        return true;\n      }\n    }\n  \n    // 游릭 KNIGHT MOVEMENT\n    if (piece.toLowerCase() === \"n\") {\n      if ((rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2)) {\n        return true;\n      }\n    }\n  \n    // 游릭 BISHOP MOVEMENT\n    if (piece.toLowerCase() === \"b\") {\n      if (rowDiff === colDiff) {\n        let rowStep = to.row > from.row ? 1 : -1;\n        let colStep = to.col > from.col ? 1 : -1;\n        let row = from.row + rowStep;\n        let col = from.col + colStep;\n        while (row !== to.row && col !== to.col) {\n          if (board[row][col]) return false;\n          row += rowStep;\n          col += colStep;\n        }\n        return true;\n      }\n    }\n  \n    // 游릭 QUEEN MOVEMENT (Fixed)\n    if (piece.toLowerCase() === \"q\") {\n      if (from.row === to.row || from.col === to.col) {\n        return isValidMove(board, from, to, turn, moveHistory); \n      }\n      if (Math.abs(to.row - from.row) === Math.abs(to.col - from.col)) {\n        return isValidMove(board, from, to, turn, moveHistory);\n      }\n      return false;\n    }\n  \n    // 游릭 KING MOVEMENT\n    if (piece.toLowerCase() === \"k\") {\n      if (rowDiff <= 1 && colDiff <= 1) {\n        return true;\n      }\n  \n      // Castling\n      if (!isKingInCheck(board, turn) && rowDiff === 0 && colDiff === 2) {\n        const rookCol = to.col > from.col ? 7 : 0;\n        const betweenCols = to.col > from.col ? [5, 6] : [1, 2, 3];\n  \n        for (let col of betweenCols) {\n          if (board[from.row][col]) return false;\n        }\n        return true;\n      }\n    }\n  \n    return false;\n  }\n  \n  export function isKingInCheck(board, turn) {\n    let kingPosition = null;\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] === (turn === \"white\" ? \"K\" : \"k\")) {\n          kingPosition = { row, col };\n          break;\n        }\n      }\n    }\n    if (!kingPosition) return false;\n  \n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        const piece = board[row][col];\n        if (piece && isValidMove(board, { row, col }, kingPosition, turn === \"white\" ? \"black\" : \"white\", [])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  \n  export function isGameOver(board, turn) {\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 8; col++) {\n        if (board[row][col] && ((turn === \"white\" && board[row][col] === board[row][col].toUpperCase()) || (turn === \"black\" && board[row][col] === board[row][col].toLowerCase()))) {\n          for (let targetRow = 0; targetRow < 8; targetRow++) {\n            for (let targetCol = 0; targetCol < 8; targetCol++) {\n              if (isValidMove(board, { row, col }, { row: targetRow, col: targetCol }, turn, [])) {\n                return false;\n              }\n            }\n          }\n        }\n      }\n    }\n    return true;\n  }\n  "],"mappings":"AAAA,OAAO,SAASA,WAAWA,CAACC,KAAK,EAAEC,IAAI,EAAEC,EAAE,EAAEC,IAAI,EAAEC,WAAW,EAAE;EAC5D,MAAMC,KAAK,GAAGL,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACL,IAAI,CAACM,GAAG,CAAC;EACvC,IAAI,CAACF,KAAK,EAAE,OAAO,KAAK,CAAC,CAAC;;EAE1B,MAAMG,OAAO,GAAGH,KAAK,KAAKA,KAAK,CAACI,WAAW,CAAC,CAAC;EAC7C,MAAMC,OAAO,GAAG,CAACF,OAAO;;EAExB;EACA,IAAKL,IAAI,KAAK,OAAO,IAAI,CAACK,OAAO,IAAML,IAAI,KAAK,OAAO,IAAIO,OAAQ,EAAE;IACnE,OAAO,KAAK;EACd;EAEA,MAAMC,WAAW,GAAGX,KAAK,CAACE,EAAE,CAACI,GAAG,CAAC,CAACJ,EAAE,CAACK,GAAG,CAAC;EACzC,MAAMK,SAAS,GAAGD,WAAW,KAAK,EAAE;;EAEpC;EACA,IAAIC,SAAS,EAAE;IACb,MAAMC,aAAa,GAAGF,WAAW,KAAKA,WAAW,CAACF,WAAW,CAAC,CAAC;IAC/D,IAAKD,OAAO,IAAIK,aAAa,IAAMH,OAAO,IAAI,CAACG,aAAc,EAAE;MAC7D,OAAO,KAAK;IACd;EACF;EAEA,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAACd,EAAE,CAACI,GAAG,GAAGL,IAAI,CAACK,GAAG,CAAC;EAC3C,MAAMW,OAAO,GAAGF,IAAI,CAACC,GAAG,CAACd,EAAE,CAACK,GAAG,GAAGN,IAAI,CAACM,GAAG,CAAC;;EAE3C;EACA,IAAIW,mBAAmB,CAAClB,KAAK,EAAEC,IAAI,EAAEC,EAAE,EAAEC,IAAI,CAAC,EAAE;IAC9C,OAAO,KAAK;EACd;;EAEA;EACA,IAAIE,KAAK,CAACc,WAAW,CAAC,CAAC,KAAK,GAAG,EAAE;IAC/B,MAAMC,SAAS,GAAGZ,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC;IAClC,MAAMa,QAAQ,GAAGb,OAAO,GAAG,CAAC,GAAG,CAAC;IAEhC,IAAIN,EAAE,CAACI,GAAG,KAAKL,IAAI,CAACK,GAAG,GAAGc,SAAS,IAAIlB,EAAE,CAACK,GAAG,KAAKN,IAAI,CAACM,GAAG,IAAI,CAACI,WAAW,EAAE;MAC1E,OAAO,IAAI;IACb;IAEA,IAAIV,IAAI,CAACK,GAAG,KAAKe,QAAQ,IAAInB,EAAE,CAACI,GAAG,KAAKL,IAAI,CAACK,GAAG,GAAG,CAAC,GAAGc,SAAS,IAAIlB,EAAE,CAACK,GAAG,KAAKN,IAAI,CAACM,GAAG,IAAI,CAACP,KAAK,CAACE,EAAE,CAACI,GAAG,CAAC,CAACJ,EAAE,CAACK,GAAG,CAAC,IAAI,CAACP,KAAK,CAACC,IAAI,CAACK,GAAG,GAAGc,SAAS,CAAC,CAAClB,EAAE,CAACK,GAAG,CAAC,EAAE;MACzJ,OAAO,IAAI;IACb;IAEA,IAAIL,EAAE,CAACI,GAAG,KAAKL,IAAI,CAACK,GAAG,GAAGc,SAAS,IAAIL,IAAI,CAACC,GAAG,CAACd,EAAE,CAACK,GAAG,GAAGN,IAAI,CAACM,GAAG,CAAC,KAAK,CAAC,IAAIK,SAAS,EAAE;MACrF,OAAO,IAAI;IACb;;IAEA;IACA,IAAIR,WAAW,CAACkB,MAAM,GAAG,CAAC,EAAE;MAC1B,MAAMC,QAAQ,GAAGnB,WAAW,CAACA,WAAW,CAACkB,MAAM,GAAG,CAAC,CAAC;MACpD,IAAIC,QAAQ,CAAClB,KAAK,CAACc,WAAW,CAAC,CAAC,KAAK,GAAG,IAAIJ,IAAI,CAACC,GAAG,CAACO,QAAQ,CAACtB,IAAI,CAACK,GAAG,GAAGiB,QAAQ,CAACrB,EAAE,CAACI,GAAG,CAAC,KAAK,CAAC,EAAE;QAC/F,IAAIJ,EAAE,CAACI,GAAG,KAAKiB,QAAQ,CAACrB,EAAE,CAACI,GAAG,GAAGc,SAAS,IAAIL,IAAI,CAACC,GAAG,CAACd,EAAE,CAACK,GAAG,GAAGN,IAAI,CAACM,GAAG,CAAC,KAAK,CAAC,IAAIL,EAAE,CAACK,GAAG,KAAKgB,QAAQ,CAACrB,EAAE,CAACK,GAAG,EAAE;UAC7G,OAAO,IAAI;QACb;MACF;IACF;EACF;;EAEA;EACA,IAAIF,KAAK,CAACc,WAAW,CAAC,CAAC,KAAK,GAAG,EAAE;IAC/B,IAAIlB,IAAI,CAACK,GAAG,KAAKJ,EAAE,CAACI,GAAG,EAAE;MACvB,KAAK,IAAIC,GAAG,GAAGQ,IAAI,CAACS,GAAG,CAACvB,IAAI,CAACM,GAAG,EAAEL,EAAE,CAACK,GAAG,CAAC,GAAG,CAAC,EAAEA,GAAG,GAAGQ,IAAI,CAACU,GAAG,CAACxB,IAAI,CAACM,GAAG,EAAEL,EAAE,CAACK,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QACtF,IAAIP,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACC,GAAG,CAAC,EAAE,OAAO,KAAK;MACxC;MACA,OAAO,IAAI;IACb;IACA,IAAIN,IAAI,CAACM,GAAG,KAAKL,EAAE,CAACK,GAAG,EAAE;MACvB,KAAK,IAAID,GAAG,GAAGS,IAAI,CAACS,GAAG,CAACvB,IAAI,CAACK,GAAG,EAAEJ,EAAE,CAACI,GAAG,CAAC,GAAG,CAAC,EAAEA,GAAG,GAAGS,IAAI,CAACU,GAAG,CAACxB,IAAI,CAACK,GAAG,EAAEJ,EAAE,CAACI,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QACtF,IAAIN,KAAK,CAACM,GAAG,CAAC,CAACL,IAAI,CAACM,GAAG,CAAC,EAAE,OAAO,KAAK;MACxC;MACA,OAAO,IAAI;IACb;EACF;;EAEA;EACA,IAAIF,KAAK,CAACc,WAAW,CAAC,CAAC,KAAK,GAAG,EAAE;IAC/B,IAAKL,OAAO,KAAK,CAAC,IAAIG,OAAO,KAAK,CAAC,IAAMH,OAAO,KAAK,CAAC,IAAIG,OAAO,KAAK,CAAE,EAAE;MACxE,OAAO,IAAI;IACb;EACF;;EAEA;EACA,IAAIZ,KAAK,CAACc,WAAW,CAAC,CAAC,KAAK,GAAG,EAAE;IAC/B,IAAIL,OAAO,KAAKG,OAAO,EAAE;MACvB,IAAIS,OAAO,GAAGxB,EAAE,CAACI,GAAG,GAAGL,IAAI,CAACK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;MACxC,IAAIqB,OAAO,GAAGzB,EAAE,CAACK,GAAG,GAAGN,IAAI,CAACM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;MACxC,IAAID,GAAG,GAAGL,IAAI,CAACK,GAAG,GAAGoB,OAAO;MAC5B,IAAInB,GAAG,GAAGN,IAAI,CAACM,GAAG,GAAGoB,OAAO;MAC5B,OAAOrB,GAAG,KAAKJ,EAAE,CAACI,GAAG,IAAIC,GAAG,KAAKL,EAAE,CAACK,GAAG,EAAE;QACvC,IAAIP,KAAK,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,EAAE,OAAO,KAAK;QACjCD,GAAG,IAAIoB,OAAO;QACdnB,GAAG,IAAIoB,OAAO;MAChB;MACA,OAAO,IAAI;IACb;EACF;;EAEA;EACA,IAAItB,KAAK,CAACc,WAAW,CAAC,CAAC,KAAK,GAAG,EAAE;IAC/B,IAAIlB,IAAI,CAACK,GAAG,KAAKJ,EAAE,CAACI,GAAG,IAAIL,IAAI,CAACM,GAAG,KAAKL,EAAE,CAACK,GAAG,EAAE;MAC9C,OAAOR,WAAW,CAACC,KAAK,EAAEC,IAAI,EAAEC,EAAE,EAAEC,IAAI,EAAEC,WAAW,CAAC;IACxD;IACA,IAAIW,IAAI,CAACC,GAAG,CAACd,EAAE,CAACI,GAAG,GAAGL,IAAI,CAACK,GAAG,CAAC,KAAKS,IAAI,CAACC,GAAG,CAACd,EAAE,CAACK,GAAG,GAAGN,IAAI,CAACM,GAAG,CAAC,EAAE;MAC/D,OAAOR,WAAW,CAACC,KAAK,EAAEC,IAAI,EAAEC,EAAE,EAAEC,IAAI,EAAEC,WAAW,CAAC;IACxD;IACA,OAAO,KAAK;EACd;;EAEA;EACA,IAAIC,KAAK,CAACc,WAAW,CAAC,CAAC,KAAK,GAAG,EAAE;IAC/B,IAAIL,OAAO,IAAI,CAAC,IAAIG,OAAO,IAAI,CAAC,EAAE;MAChC,OAAO,IAAI;IACb;;IAEA;IACA,IAAI,CAACW,aAAa,CAAC5B,KAAK,EAAEG,IAAI,CAAC,IAAIW,OAAO,KAAK,CAAC,IAAIG,OAAO,KAAK,CAAC,EAAE;MACjE,MAAMY,OAAO,GAAG3B,EAAE,CAACK,GAAG,GAAGN,IAAI,CAACM,GAAG,GAAG,CAAC,GAAG,CAAC;MACzC,MAAMuB,WAAW,GAAG5B,EAAE,CAACK,GAAG,GAAGN,IAAI,CAACM,GAAG,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAE1D,KAAK,IAAIA,GAAG,IAAIuB,WAAW,EAAE;QAC3B,IAAI9B,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACC,GAAG,CAAC,EAAE,OAAO,KAAK;MACxC;MACA,OAAO,IAAI;IACb;EACF;EAEA,OAAO,KAAK;AACd;AAEA,OAAO,SAASqB,aAAaA,CAAC5B,KAAK,EAAEG,IAAI,EAAE;EACzC,IAAI4B,YAAY,GAAG,IAAI;EACvB,KAAK,IAAIzB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;IAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,IAAIP,KAAK,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,MAAMJ,IAAI,KAAK,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE;QACtD4B,YAAY,GAAG;UAAEzB,GAAG;UAAEC;QAAI,CAAC;QAC3B;MACF;IACF;EACF;EACA,IAAI,CAACwB,YAAY,EAAE,OAAO,KAAK;EAE/B,KAAK,IAAIzB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;IAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,MAAMF,KAAK,GAAGL,KAAK,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC;MAC7B,IAAIF,KAAK,IAAIN,WAAW,CAACC,KAAK,EAAE;QAAEM,GAAG;QAAEC;MAAI,CAAC,EAAEwB,YAAY,EAAE5B,IAAI,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO,EAAE,EAAE,CAAC,EAAE;QACrG,OAAO,IAAI;MACb;IACF;EACF;EACA,OAAO,KAAK;AACd;AAEA,OAAO,SAAS6B,UAAUA,CAAChC,KAAK,EAAEG,IAAI,EAAE;EACtC,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;IAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,IAAIP,KAAK,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,KAAMJ,IAAI,KAAK,OAAO,IAAIH,KAAK,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,KAAKP,KAAK,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,CAACE,WAAW,CAAC,CAAC,IAAMN,IAAI,KAAK,OAAO,IAAIH,KAAK,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,KAAKP,KAAK,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC,CAACY,WAAW,CAAC,CAAE,CAAC,EAAE;QAC3K,KAAK,IAAIc,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAG,CAAC,EAAEA,SAAS,EAAE,EAAE;UAClD,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAG,CAAC,EAAEA,SAAS,EAAE,EAAE;YAClD,IAAInC,WAAW,CAACC,KAAK,EAAE;cAAEM,GAAG;cAAEC;YAAI,CAAC,EAAE;cAAED,GAAG,EAAE2B,SAAS;cAAE1B,GAAG,EAAE2B;YAAU,CAAC,EAAE/B,IAAI,EAAE,EAAE,CAAC,EAAE;cAClF,OAAO,KAAK;YACd;UACF;QACF;MACF;IACF;EACF;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}