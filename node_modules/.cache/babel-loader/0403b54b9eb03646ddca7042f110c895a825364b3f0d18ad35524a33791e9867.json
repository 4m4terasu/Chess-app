{"ast":null,"code":"var _jsxFileName = \"/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const handleCellClick = (row, col) => {\n    // If no cell is selected and there's a piece here, select it.\n    if (!selectedCell && board[row][col] !== \"\") {\n      setSelectedCell({\n        row,\n        col\n      });\n      return;\n    }\n    // Otherwise, move the piece from the selected cell to the clicked cell.\n    if (selectedCell) {\n      const newBoard = board.map(r => [...r]);\n      newBoard[row][col] = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n      setBoard(newBoard);\n      setSelectedCell(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chess-board\",\n    children: board.map((rowData, rowIndex) => rowData.map((cellData, colIndex) => {\n      const isLight = (rowIndex + colIndex) % 2 === 0;\n      const isSelected = selectedCell && selectedCell.row === rowIndex && selectedCell.col === colIndex;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${isLight ? 'light' : 'dark'} ${isSelected ? 'selected' : ''}`,\n        onClick: () => handleCellClick(rowIndex, colIndex),\n        children: cellData && pieceSymbols[cellData]\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this);\n    }))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"2HpY1QX0mms0vyoJptLGXhcarII=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","initialBoard","pieceSymbols","jsxDEV","_jsxDEV","ChessBoard","_s","board","setBoard","selectedCell","setSelectedCell","handleCellClick","row","col","newBoard","map","r","className","children","rowData","rowIndex","cellData","colIndex","isLight","isSelected","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport './ChessBoard.css';\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n\n  const handleCellClick = (row, col) => {\n    // If no cell is selected and there's a piece here, select it.\n    if (!selectedCell && board[row][col] !== \"\") {\n      setSelectedCell({ row, col });\n      return;\n    }\n    // Otherwise, move the piece from the selected cell to the clicked cell.\n    if (selectedCell) {\n      const newBoard = board.map((r) => [...r]);\n      newBoard[row][col] = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n      setBoard(newBoard);\n      setSelectedCell(null);\n    }\n  };\n\n  return (\n    <div className=\"chess-board\">\n      {board.map((rowData, rowIndex) =>\n        rowData.map((cellData, colIndex) => {\n          const isLight = (rowIndex + colIndex) % 2 === 0;\n          const isSelected =\n            selectedCell &&\n            selectedCell.row === rowIndex &&\n            selectedCell.col === colIndex;\n          return (\n            <div\n              key={`${rowIndex}-${colIndex}`}\n              className={`cell ${isLight ? 'light' : 'dark'} ${isSelected ? 'selected' : ''}`}\n              onClick={() => handleCellClick(rowIndex, colIndex)}\n            >\n              {cellData && pieceSymbols[cellData]}\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,EAAEC,YAAY,QAAQ,gBAAgB;AAC3D,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACC,YAAY,CAAC;EAChD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMW,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACpC;IACA,IAAI,CAACJ,YAAY,IAAIF,KAAK,CAACK,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK,EAAE,EAAE;MAC3CH,eAAe,CAAC;QAAEE,GAAG;QAAEC;MAAI,CAAC,CAAC;MAC7B;IACF;IACA;IACA,IAAIJ,YAAY,EAAE;MAChB,MAAMK,QAAQ,GAAGP,KAAK,CAACQ,GAAG,CAAEC,CAAC,IAAK,CAAC,GAAGA,CAAC,CAAC,CAAC;MACzCF,QAAQ,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGN,KAAK,CAACE,YAAY,CAACG,GAAG,CAAC,CAACH,YAAY,CAACI,GAAG,CAAC;MAC9DC,QAAQ,CAACL,YAAY,CAACG,GAAG,CAAC,CAACH,YAAY,CAACI,GAAG,CAAC,GAAG,EAAE;MACjDL,QAAQ,CAACM,QAAQ,CAAC;MAClBJ,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC;EAED,oBACEN,OAAA;IAAKa,SAAS,EAAC,aAAa;IAAAC,QAAA,EACzBX,KAAK,CAACQ,GAAG,CAAC,CAACI,OAAO,EAAEC,QAAQ,KAC3BD,OAAO,CAACJ,GAAG,CAAC,CAACM,QAAQ,EAAEC,QAAQ,KAAK;MAClC,MAAMC,OAAO,GAAG,CAACH,QAAQ,GAAGE,QAAQ,IAAI,CAAC,KAAK,CAAC;MAC/C,MAAME,UAAU,GACdf,YAAY,IACZA,YAAY,CAACG,GAAG,KAAKQ,QAAQ,IAC7BX,YAAY,CAACI,GAAG,KAAKS,QAAQ;MAC/B,oBACElB,OAAA;QAEEa,SAAS,EAAE,QAAQM,OAAO,GAAG,OAAO,GAAG,MAAM,IAAIC,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;QAChFC,OAAO,EAAEA,CAAA,KAAMd,eAAe,CAACS,QAAQ,EAAEE,QAAQ,CAAE;QAAAJ,QAAA,EAElDG,QAAQ,IAAInB,YAAY,CAACmB,QAAQ;MAAC,GAJ9B,GAAGD,QAAQ,IAAIE,QAAQ,EAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAK3B,CAAC;IAEV,CAAC,CACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvB,EAAA,CA1CID,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AA4ChB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}