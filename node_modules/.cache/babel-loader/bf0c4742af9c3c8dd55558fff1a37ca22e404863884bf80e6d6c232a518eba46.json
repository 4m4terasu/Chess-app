{"ast":null,"code":"var _jsxFileName = \"/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst promotionOptions = [\"q\", \"r\", \"b\", \"n\"];\nconst ChessBoard = () => {\n  _s();\n  // Initialize state from localStorage if available; otherwise, use defaults.\n  const [board, setBoard] = useState(() => {\n    const saved = localStorage.getItem('chessGameBoard');\n    return saved ? JSON.parse(saved) : initialBoard;\n  });\n  const [turn, setTurn] = useState(() => {\n    const saved = localStorage.getItem('chessGameTurn');\n    return saved ? JSON.parse(saved) : \"white\";\n  });\n  const [gameOver, setGameOver] = useState(() => {\n    const saved = localStorage.getItem('chessGameOver');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [gameMessage, setGameMessage] = useState(() => {\n    const saved = localStorage.getItem('chessGameMessage');\n    return saved ? JSON.parse(saved) : \"\";\n  });\n  const [promotion, setPromotion] = useState(() => {\n    const saved = localStorage.getItem('chessPromotion');\n    return saved ? JSON.parse(saved) : null;\n  });\n  const [flipBoard, setFlipBoard] = useState(() => {\n    const saved = localStorage.getItem('chessFlipBoard');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [availableMoves, setAvailableMoves] = useState([]);\n  const [showRestartConfirm, setShowRestartConfirm] = useState(false);\n\n  // Audio refs for sound effects.\n  const moveCheckSoundRef = useRef(new Audio('/sounds/move-check.mp3'));\n  const moveSelfSoundRef = useRef(new Audio('/sounds/move-self.mp3'));\n  const captureSoundRef = useRef(new Audio('/sounds/capture.mp3'));\n  const castleSoundRef = useRef(new Audio('/sounds/castle.mp3'));\n  const promotionSoundRef = useRef(new Audio('/sounds/promotion.mp3'));\n  const notifySoundRef = useRef(new Audio('/sounds/notify.mp3'));\n\n  // Persist key game states to localStorage.\n  useEffect(() => {\n    localStorage.setItem('chessGameBoard', JSON.stringify(board));\n    localStorage.setItem('chessGameTurn', JSON.stringify(turn));\n    localStorage.setItem('chessGameOver', JSON.stringify(gameOver));\n    localStorage.setItem('chessGameMessage', JSON.stringify(gameMessage));\n    localStorage.setItem('chessPromotion', JSON.stringify(promotion));\n    localStorage.setItem('chessFlipBoard', JSON.stringify(flipBoard));\n  }, [board, turn, gameOver, gameMessage, promotion, flipBoard]);\n\n  // Modified playSound: checks source and handles errors.\n  const playSound = soundRef => {\n    if (soundRef.current && soundRef.current.src) {\n      if (soundRef.current.error) return;\n      try {\n        soundRef.current.currentTime = 0;\n        soundRef.current.play().catch(err => {\n          console.error(\"Audio play error:\", err);\n        });\n      } catch (err) {\n        console.error(\"Audio playback error:\", err);\n      }\n    }\n  };\n\n  // Compute available moves when a piece is selected.\n  useEffect(() => {\n    if (selectedCell) {\n      const moves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedCell, {\n            row,\n            col\n          }, turn, [])) {\n            moves.push({\n              row,\n              col\n            });\n          }\n        }\n      }\n      setAvailableMoves(moves);\n    } else {\n      setAvailableMoves([]);\n    }\n  }, [selectedCell, board, turn]);\n\n  // Check game status after every move.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      playSound(notifySoundRef);\n      setGameOver(true);\n    }\n  }, [board, turn]);\n\n  // Transform displayed coordinates to board coordinates if board is flipped.\n  const transformCoordinates = (row, col) => {\n    if (!flipBoard) return {\n      row,\n      col\n    };\n    return {\n      row: 7 - row,\n      col\n    };\n  };\n\n  // For rendering: if board is flipped, render rows in reverse order.\n  const renderRows = flipBoard ? [...board].reverse() : board;\n  const handleCellClick = (displayRow, displayCol) => {\n    if (gameOver || promotion || showRestartConfirm) return;\n    const {\n      row,\n      col\n    } = transformCoordinates(displayRow, displayCol);\n\n    // If clicking an available move:\n    if (selectedCell && availableMoves.some(move => move.row === row && move.col === col)) {\n      const newBoard = board.map(r => [...r]);\n      const movingPiece = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n      let soundPlayed = false;\n      if (newBoard[row][col] !== \"\") {\n        playSound(captureSoundRef);\n        soundPlayed = true;\n      } else {\n        playSound(moveSelfSoundRef);\n      }\n      if (movingPiece.toLowerCase() === \"p\" && (turn === \"white\" && row === 0 || turn === \"black\" && row === 7)) {\n        newBoard[row][col] = movingPiece;\n        setPromotion({\n          row,\n          col,\n          color: turn,\n          piece: movingPiece\n        });\n        soundPlayed = true;\n      } else {\n        newBoard[row][col] = movingPiece;\n      }\n      if (movingPiece.toLowerCase() === \"k\" && Math.abs(col - selectedCell.col) === 2) {\n        playSound(castleSoundRef);\n        soundPlayed = true;\n        if (col > selectedCell.col) {\n          newBoard[selectedCell.row][7] = \"\";\n          newBoard[selectedCell.row][5] = turn === \"white\" ? \"R\" : \"r\";\n        } else {\n          newBoard[selectedCell.row][0] = \"\";\n          newBoard[selectedCell.row][3] = turn === \"white\" ? \"R\" : \"r\";\n        }\n      }\n      setBoard(newBoard);\n      if (!(movingPiece.toLowerCase() === \"p\" && (turn === \"white\" && row === 0 || turn === \"black\" && row === 7))) {\n        setTurn(turn === \"white\" ? \"black\" : \"white\");\n      }\n      setSelectedCell(null);\n      return;\n    }\n\n    // Select a piece.\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({\n          row,\n          col\n        });\n      }\n      return;\n    }\n    // If clicking another own piece, update selection.\n    if (board[row][col] !== \"\" && (turn === \"white\" && board[row][col] === board[row][col].toUpperCase() || turn === \"black\" && board[row][col] === board[row][col].toLowerCase())) {\n      setSelectedCell({\n        row,\n        col\n      });\n      return;\n    }\n    setSelectedCell(null);\n  };\n  const handlePromotionChoice = choice => {\n    const newBoard = board.map(r => [...r]);\n    const {\n      row,\n      col,\n      color\n    } = promotion;\n    const promotedPiece = color === \"white\" ? choice.toUpperCase() : choice.toLowerCase();\n    newBoard[row][col] = promotedPiece;\n    playSound(promotionSoundRef);\n    setBoard(newBoard);\n    setPromotion(null);\n    setTurn(turn === \"white\" ? \"black\" : \"white\");\n  };\n  const handleRestart = () => {\n    setShowRestartConfirm(true);\n    playSound(notifySoundRef);\n  };\n  const confirmRestart = confirm => {\n    if (confirm) {\n      setBoard(initialBoard);\n      setTurn(\"white\");\n      setSelectedCell(null);\n      setAvailableMoves([]);\n      setGameOver(false);\n      setGameMessage(\"\");\n      setPromotion(null);\n    }\n    setShowRestartConfirm(false);\n  };\n  const handleSwitchSide = () => {\n    setFlipBoard(!flipBoard);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        children: \"Restart Match\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSwitchSide,\n        children: \"Switch Side\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-board\",\n      children: renderRows.map((rowData, displayRow) => rowData.map((cellData, displayCol) => {\n        const {\n          row,\n          col\n        } = transformCoordinates(displayRow, displayCol);\n        const isLight = (row + col) % 2 === 0;\n        let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n        if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\n          cellClass += \" selected\";\n        }\n        if (availableMoves.some(move => move.row === row && move.col === col)) {\n          cellClass += \" available\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cellClass,\n          onClick: () => handleCellClick(displayRow, displayCol),\n          children: cellData && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\",\n            children: pieceSymbols[cellData]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 19\n          }, this)\n        }, `${row}-${col}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turn: \", turn.charAt(0).toUpperCase() + turn.slice(1)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), promotion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"promotion-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"promotion-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Promote Pawn:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), promotionOptions.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePromotionChoice(option),\n          children: pieceSymbols[promotion.color === \"white\" ? option.toUpperCase() : option.toLowerCase()]\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this), showRestartConfirm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirm-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirm-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to restart the match?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => confirmRestart(true),\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => confirmRestart(false),\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"eA/eWSjlsTAETLrauKzP6wgVWa0=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","initialBoard","pieceSymbols","isValidMove","isGameOver","isKingInCheck","jsxDEV","_jsxDEV","promotionOptions","ChessBoard","_s","board","setBoard","saved","localStorage","getItem","JSON","parse","turn","setTurn","gameOver","setGameOver","gameMessage","setGameMessage","promotion","setPromotion","flipBoard","setFlipBoard","selectedCell","setSelectedCell","availableMoves","setAvailableMoves","showRestartConfirm","setShowRestartConfirm","moveCheckSoundRef","Audio","moveSelfSoundRef","captureSoundRef","castleSoundRef","promotionSoundRef","notifySoundRef","setItem","stringify","playSound","soundRef","current","src","error","currentTime","play","catch","err","console","moves","row","col","push","winner","transformCoordinates","renderRows","reverse","handleCellClick","displayRow","displayCol","some","move","newBoard","map","r","movingPiece","soundPlayed","toLowerCase","color","piece","Math","abs","toUpperCase","handlePromotionChoice","choice","promotedPiece","handleRestart","confirmRestart","confirm","handleSwitchSide","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","rowData","cellData","isLight","cellClass","charAt","slice","option","_c","$RefreshReg$"],"sources":["/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\n\nconst promotionOptions = [\"q\", \"r\", \"b\", \"n\"];\n\nconst ChessBoard = () => {\n  // Initialize state from localStorage if available; otherwise, use defaults.\n  const [board, setBoard] = useState(() => {\n    const saved = localStorage.getItem('chessGameBoard');\n    return saved ? JSON.parse(saved) : initialBoard;\n  });\n  const [turn, setTurn] = useState(() => {\n    const saved = localStorage.getItem('chessGameTurn');\n    return saved ? JSON.parse(saved) : \"white\";\n  });\n  const [gameOver, setGameOver] = useState(() => {\n    const saved = localStorage.getItem('chessGameOver');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [gameMessage, setGameMessage] = useState(() => {\n    const saved = localStorage.getItem('chessGameMessage');\n    return saved ? JSON.parse(saved) : \"\";\n  });\n  const [promotion, setPromotion] = useState(() => {\n    const saved = localStorage.getItem('chessPromotion');\n    return saved ? JSON.parse(saved) : null;\n  });\n  const [flipBoard, setFlipBoard] = useState(() => {\n    const saved = localStorage.getItem('chessFlipBoard');\n    return saved ? JSON.parse(saved) : false;\n  });\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [availableMoves, setAvailableMoves] = useState([]);\n  const [showRestartConfirm, setShowRestartConfirm] = useState(false);\n\n  // Audio refs for sound effects.\n  const moveCheckSoundRef = useRef(new Audio('/sounds/move-check.mp3'));\n  const moveSelfSoundRef = useRef(new Audio('/sounds/move-self.mp3'));\n  const captureSoundRef = useRef(new Audio('/sounds/capture.mp3'));\n  const castleSoundRef = useRef(new Audio('/sounds/castle.mp3'));\n  const promotionSoundRef = useRef(new Audio('/sounds/promotion.mp3'));\n  const notifySoundRef = useRef(new Audio('/sounds/notify.mp3'));\n\n  // Persist key game states to localStorage.\n  useEffect(() => {\n    localStorage.setItem('chessGameBoard', JSON.stringify(board));\n    localStorage.setItem('chessGameTurn', JSON.stringify(turn));\n    localStorage.setItem('chessGameOver', JSON.stringify(gameOver));\n    localStorage.setItem('chessGameMessage', JSON.stringify(gameMessage));\n    localStorage.setItem('chessPromotion', JSON.stringify(promotion));\n    localStorage.setItem('chessFlipBoard', JSON.stringify(flipBoard));\n  }, [board, turn, gameOver, gameMessage, promotion, flipBoard]);\n\n  // Modified playSound: checks source and handles errors.\n  const playSound = (soundRef) => {\n    if (soundRef.current && soundRef.current.src) {\n      if (soundRef.current.error) return;\n      try {\n        soundRef.current.currentTime = 0;\n        soundRef.current.play().catch(err => {\n          console.error(\"Audio play error:\", err);\n        });\n      } catch (err) {\n        console.error(\"Audio playback error:\", err);\n      }\n    }\n  };\n\n  // Compute available moves when a piece is selected.\n  useEffect(() => {\n    if (selectedCell) {\n      const moves = [];\n      for (let row = 0; row < 8; row++) {\n        for (let col = 0; col < 8; col++) {\n          if (isValidMove(board, selectedCell, { row, col }, turn, [])) {\n            moves.push({ row, col });\n          }\n        }\n      }\n      setAvailableMoves(moves);\n    } else {\n      setAvailableMoves([]);\n    }\n  }, [selectedCell, board, turn]);\n\n  // Check game status after every move.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      playSound(notifySoundRef);\n      setGameOver(true);\n    }\n  }, [board, turn]);\n\n  // Transform displayed coordinates to board coordinates if board is flipped.\n  const transformCoordinates = (row, col) => {\n    if (!flipBoard) return { row, col };\n    return { row: 7 - row, col };\n  };\n\n  // For rendering: if board is flipped, render rows in reverse order.\n  const renderRows = flipBoard ? [...board].reverse() : board;\n\n  const handleCellClick = (displayRow, displayCol) => {\n    if (gameOver || promotion || showRestartConfirm) return;\n    const { row, col } = transformCoordinates(displayRow, displayCol);\n\n    // If clicking an available move:\n    if (selectedCell && availableMoves.some(move => move.row === row && move.col === col)) {\n      const newBoard = board.map(r => [...r]);\n      const movingPiece = board[selectedCell.row][selectedCell.col];\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n      \n      let soundPlayed = false;\n      if (newBoard[row][col] !== \"\") {\n        playSound(captureSoundRef);\n        soundPlayed = true;\n      } else {\n        playSound(moveSelfSoundRef);\n      }\n      \n      if (\n        movingPiece.toLowerCase() === \"p\" &&\n        ((turn === \"white\" && row === 0) || (turn === \"black\" && row === 7))\n      ) {\n        newBoard[row][col] = movingPiece;\n        setPromotion({ row, col, color: turn, piece: movingPiece });\n        soundPlayed = true;\n      } else {\n        newBoard[row][col] = movingPiece;\n      }\n      \n      if (movingPiece.toLowerCase() === \"k\" && Math.abs(col - selectedCell.col) === 2) {\n        playSound(castleSoundRef);\n        soundPlayed = true;\n        if (col > selectedCell.col) {\n          newBoard[selectedCell.row][7] = \"\";\n          newBoard[selectedCell.row][5] = turn === \"white\" ? \"R\" : \"r\";\n        } else {\n          newBoard[selectedCell.row][0] = \"\";\n          newBoard[selectedCell.row][3] = turn === \"white\" ? \"R\" : \"r\";\n        }\n      }\n      \n      setBoard(newBoard);\n      if (!(movingPiece.toLowerCase() === \"p\" && ((turn === \"white\" && row === 0) || (turn === \"black\" && row === 7)))) {\n        setTurn(turn === \"white\" ? \"black\" : \"white\");\n      }\n      setSelectedCell(null);\n      return;\n    }\n\n    // Select a piece.\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({ row, col });\n      }\n      return;\n    }\n    // If clicking another own piece, update selection.\n    if (\n      board[row][col] !== \"\" &&\n      ((turn === \"white\" && board[row][col] === board[row][col].toUpperCase()) ||\n       (turn === \"black\" && board[row][col] === board[row][col].toLowerCase()))\n    ) {\n      setSelectedCell({ row, col });\n      return;\n    }\n    setSelectedCell(null);\n  };\n\n  const handlePromotionChoice = (choice) => {\n    const newBoard = board.map(r => [...r]);\n    const { row, col, color } = promotion;\n    const promotedPiece = color === \"white\" ? choice.toUpperCase() : choice.toLowerCase();\n    newBoard[row][col] = promotedPiece;\n    playSound(promotionSoundRef);\n    setBoard(newBoard);\n    setPromotion(null);\n    setTurn(turn === \"white\" ? \"black\" : \"white\");\n  };\n\n  const handleRestart = () => {\n    setShowRestartConfirm(true);\n    playSound(notifySoundRef);\n  };\n\n  const confirmRestart = (confirm) => {\n    if (confirm) {\n      setBoard(initialBoard);\n      setTurn(\"white\");\n      setSelectedCell(null);\n      setAvailableMoves([]);\n      setGameOver(false);\n      setGameMessage(\"\");\n      setPromotion(null);\n    }\n    setShowRestartConfirm(false);\n  };\n\n  const handleSwitchSide = () => {\n    setFlipBoard(!flipBoard);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"controls\">\n        <button onClick={handleRestart}>Restart Match</button>\n        <button onClick={handleSwitchSide}>Switch Side</button>\n      </div>\n      <div className=\"chess-board\">\n        {renderRows.map((rowData, displayRow) =>\n          rowData.map((cellData, displayCol) => {\n            const { row, col } = transformCoordinates(displayRow, displayCol);\n            const isLight = (row + col) % 2 === 0;\n            let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n            if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\n              cellClass += \" selected\";\n            }\n            if (availableMoves.some(move => move.row === row && move.col === col)) {\n              cellClass += \" available\";\n            }\n            return (\n              <div\n                key={`${row}-${col}`}\n                className={cellClass}\n                onClick={() => handleCellClick(displayRow, displayCol)}\n              >\n                {cellData && (\n                  <span className={cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\"}>\n                    {pieceSymbols[cellData]}\n                  </span>\n                )}\n              </div>\n            );\n          })\n        )}\n      </div>\n      <div className=\"status\">\n        {!gameOver ? (\n          <p>Turn: {turn.charAt(0).toUpperCase() + turn.slice(1)}</p>\n        ) : (\n          <div>\n            <p>{gameMessage}</p>\n          </div>\n        )}\n      </div>\n\n      {promotion && (\n        <div className=\"promotion-modal\">\n          <div className=\"promotion-content\">\n            <p>Promote Pawn:</p>\n            {promotionOptions.map((option) => (\n              <button key={option} onClick={() => handlePromotionChoice(option)}>\n                {pieceSymbols[promotion.color === \"white\" ? option.toUpperCase() : option.toLowerCase()]}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {showRestartConfirm && (\n        <div className=\"confirm-modal\">\n          <div className=\"confirm-content\">\n            <p>Are you sure you want to restart the match?</p>\n            <button onClick={() => confirmRestart(true)}>Yes</button>\n            <button onClick={() => confirmRestart(false)}>No</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}