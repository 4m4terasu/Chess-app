{"ast":null,"code":"var _jsxFileName = \"/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst promotionOptions = [\"q\", \"r\", \"b\", \"n\"]; // default promotion to queen, rook, bishop, knight\n\nconst ChessBoard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [turn, setTurn] = useState(\"white\");\n  const [gameOver, setGameOver] = useState(false);\n  const [gameMessage, setGameMessage] = useState(\"\");\n  const [promotion, setPromotion] = useState(null); // { row, col, color, from }\n\n  // Check game status after every move.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      setGameOver(true);\n    }\n  }, [board, turn]);\n  const handleCellClick = (row, col) => {\n    if (gameOver || promotion) return; // Block moves if game over or promotion pending\n\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({\n          row,\n          col\n        });\n      }\n      return;\n    }\n    if (isValidMove(board, selectedCell, {\n      row,\n      col\n    }, turn, [])) {\n      // Copy board\n      const newBoard = board.map(r => [...r]);\n      const movingPiece = board[selectedCell.row][selectedCell.col];\n\n      // Remove piece from origin\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n\n      // Check if pawn reaches promotion rank\n      if (movingPiece.toLowerCase() === \"p\" && (turn === \"white\" && row === 0 || turn === \"black\" && row === 7)) {\n        // Instead of placing pawn immediately, set promotion state.\n        setPromotion({\n          row,\n          col,\n          color: turn,\n          piece: movingPiece\n        });\n        // Temporarily place the pawn so the board looks updated.\n        newBoard[row][col] = movingPiece;\n      } else {\n        newBoard[row][col] = movingPiece;\n      }\n\n      // Handle castling: if king moves two squares horizontally.\n      if (movingPiece.toLowerCase() === \"k\" && Math.abs(col - selectedCell.col) === 2) {\n        if (col > selectedCell.col) {\n          // King-side castling: move rook from column 7 to column 5.\n          newBoard[selectedCell.row][7] = \"\";\n          newBoard[selectedCell.row][5] = turn === \"white\" ? \"R\" : \"r\";\n        } else {\n          // Queen-side castling: move rook from column 0 to column 3.\n          newBoard[selectedCell.row][0] = \"\";\n          newBoard[selectedCell.row][3] = turn === \"white\" ? \"R\" : \"r\";\n        }\n      }\n      setBoard(newBoard);\n      // Only switch turn immediately if no promotion pending.\n      if (!(movingPiece.toLowerCase() === \"p\" && (turn === \"white\" && row === 0 || turn === \"black\" && row === 7))) {\n        setTurn(turn === \"white\" ? \"black\" : \"white\");\n      }\n    }\n    setSelectedCell(null);\n  };\n\n  // Called when the player chooses a promotion option.\n  const handlePromotionChoice = choice => {\n    const newBoard = board.map(r => [...r]);\n    const {\n      row,\n      col,\n      color,\n      piece\n    } = promotion;\n    // Build the promoted piece symbol.\n    // If white, uppercase; if black, lowercase.\n    const promotedPiece = color === \"white\" ? choice.toUpperCase() : choice.toLowerCase();\n    newBoard[row][col] = promotedPiece;\n    setBoard(newBoard);\n    setPromotion(null);\n    // Switch turn after promotion.\n    setTurn(turn === \"white\" ? \"black\" : \"white\");\n  };\n  const handleRestart = () => {\n    setBoard(initialBoard);\n    setTurn(\"white\");\n    setSelectedCell(null);\n    setGameOver(false);\n    setGameMessage(\"\");\n    setPromotion(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chess-board\",\n      children: board.map((rowData, rowIndex) => rowData.map((cellData, colIndex) => {\n        const isLight = (rowIndex + colIndex) % 2 === 0;\n        let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n        if (selectedCell && selectedCell.row === rowIndex && selectedCell.col === colIndex) {\n          cellClass += \" selected\";\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cellClass,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: cellData && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\",\n            children: pieceSymbols[cellData]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 19\n          }, this)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turn: \", turn.charAt(0).toUpperCase() + turn.slice(1)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: gameMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRestart,\n          children: \"Restart Match\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), promotion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"promotion-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"promotion-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Promote Pawn:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), promotionOptions.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePromotionChoice(option),\n          children: pieceSymbols[promotion.color === \"white\" ? option.toUpperCase() : option.toLowerCase()]\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"kBgg+U/RgZXM60b+n9dpCydLPY4=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","initialBoard","pieceSymbols","isValidMove","isGameOver","isKingInCheck","jsxDEV","_jsxDEV","promotionOptions","ChessBoard","_s","board","setBoard","selectedCell","setSelectedCell","turn","setTurn","gameOver","setGameOver","gameMessage","setGameMessage","promotion","setPromotion","winner","handleCellClick","row","col","newBoard","map","r","movingPiece","toLowerCase","color","piece","Math","abs","handlePromotionChoice","choice","promotedPiece","toUpperCase","handleRestart","className","children","rowData","rowIndex","cellData","colIndex","isLight","cellClass","onClick","fileName","_jsxFileName","lineNumber","columnNumber","charAt","slice","option","_c","$RefreshReg$"],"sources":["/Users/mikeb/CV_projects/chess-app/src/components/ChessBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { initialBoard, pieceSymbols } from '../utils/chess';\nimport { isValidMove, isGameOver, isKingInCheck } from '../utils/chessLogic';\nimport './ChessBoard.css';\n\nconst promotionOptions = [\"q\", \"r\", \"b\", \"n\"]; // default promotion to queen, rook, bishop, knight\n\nconst ChessBoard = () => {\n  const [board, setBoard] = useState(initialBoard);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [turn, setTurn] = useState(\"white\");\n  const [gameOver, setGameOver] = useState(false);\n  const [gameMessage, setGameMessage] = useState(\"\");\n  const [promotion, setPromotion] = useState(null); // { row, col, color, from }\n\n  // Check game status after every move.\n  useEffect(() => {\n    if (isGameOver(board, turn)) {\n      if (isKingInCheck(board, turn)) {\n        const winner = turn === \"white\" ? \"Black\" : \"White\";\n        setGameMessage(`Checkmate! ${winner} wins!`);\n      } else {\n        setGameMessage(\"Stalemate! It's a draw!\");\n      }\n      setGameOver(true);\n    }\n  }, [board, turn]);\n\n  const handleCellClick = (row, col) => {\n    if (gameOver || promotion) return; // Block moves if game over or promotion pending\n\n    if (!selectedCell) {\n      if (board[row][col] !== \"\") {\n        setSelectedCell({ row, col });\n      }\n      return;\n    }\n\n    if (isValidMove(board, selectedCell, { row, col }, turn, [])) {\n      // Copy board\n      const newBoard = board.map(r => [...r]);\n      const movingPiece = board[selectedCell.row][selectedCell.col];\n\n      // Remove piece from origin\n      newBoard[selectedCell.row][selectedCell.col] = \"\";\n\n      // Check if pawn reaches promotion rank\n      if (movingPiece.toLowerCase() === \"p\" && ((turn === \"white\" && row === 0) || (turn === \"black\" && row === 7))) {\n        // Instead of placing pawn immediately, set promotion state.\n        setPromotion({ row, col, color: turn, piece: movingPiece });\n        // Temporarily place the pawn so the board looks updated.\n        newBoard[row][col] = movingPiece;\n      } else {\n        newBoard[row][col] = movingPiece;\n      }\n\n      // Handle castling: if king moves two squares horizontally.\n      if (movingPiece.toLowerCase() === \"k\" && Math.abs(col - selectedCell.col) === 2) {\n        if (col > selectedCell.col) {\n          // King-side castling: move rook from column 7 to column 5.\n          newBoard[selectedCell.row][7] = \"\";\n          newBoard[selectedCell.row][5] = turn === \"white\" ? \"R\" : \"r\";\n        } else {\n          // Queen-side castling: move rook from column 0 to column 3.\n          newBoard[selectedCell.row][0] = \"\";\n          newBoard[selectedCell.row][3] = turn === \"white\" ? \"R\" : \"r\";\n        }\n      }\n\n      setBoard(newBoard);\n      // Only switch turn immediately if no promotion pending.\n      if (!(movingPiece.toLowerCase() === \"p\" && ((turn === \"white\" && row === 0) || (turn === \"black\" && row === 7)))) {\n        setTurn(turn === \"white\" ? \"black\" : \"white\");\n      }\n    }\n    setSelectedCell(null);\n  };\n\n  // Called when the player chooses a promotion option.\n  const handlePromotionChoice = (choice) => {\n    const newBoard = board.map(r => [...r]);\n    const { row, col, color, piece } = promotion;\n    // Build the promoted piece symbol.\n    // If white, uppercase; if black, lowercase.\n    const promotedPiece = color === \"white\" ? choice.toUpperCase() : choice.toLowerCase();\n    newBoard[row][col] = promotedPiece;\n    setBoard(newBoard);\n    setPromotion(null);\n    // Switch turn after promotion.\n    setTurn(turn === \"white\" ? \"black\" : \"white\");\n  };\n\n  const handleRestart = () => {\n    setBoard(initialBoard);\n    setTurn(\"white\");\n    setSelectedCell(null);\n    setGameOver(false);\n    setGameMessage(\"\");\n    setPromotion(null);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"chess-board\">\n        {board.map((rowData, rowIndex) =>\n          rowData.map((cellData, colIndex) => {\n            const isLight = (rowIndex + colIndex) % 2 === 0;\n            let cellClass = `cell ${isLight ? 'light' : 'dark'}`;\n            if (selectedCell && selectedCell.row === rowIndex && selectedCell.col === colIndex) {\n              cellClass += \" selected\";\n            }\n            return (\n              <div\n                key={`${rowIndex}-${colIndex}`}\n                className={cellClass}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {cellData && (\n                  <span className={cellData === cellData.toUpperCase() ? \"white-piece\" : \"black-piece\"}>\n                    {pieceSymbols[cellData]}\n                  </span>\n                )}\n              </div>\n            );\n          })\n        )}\n      </div>\n      <div className=\"status\">\n        {!gameOver ? (\n          <p>Turn: {turn.charAt(0).toUpperCase() + turn.slice(1)}</p>\n        ) : (\n          <div>\n            <p>{gameMessage}</p>\n            <button onClick={handleRestart}>Restart Match</button>\n          </div>\n        )}\n      </div>\n\n      {/* Promotion Modal */}\n      {promotion && (\n        <div className=\"promotion-modal\">\n          <div className=\"promotion-content\">\n            <p>Promote Pawn:</p>\n            {promotionOptions.map((option) => (\n              <button key={option} onClick={() => handlePromotionChoice(option)}>\n                {pieceSymbols[promotion.color === \"white\" ? option.toUpperCase() : option.toLowerCase()]}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}